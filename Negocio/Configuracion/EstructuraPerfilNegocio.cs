using System;using System.Collections.Generic;using System.Data;using System.Linq;using System.Net.Sockets;using System.Text;using System.Transactions;using Negocio.Utilidades;using PersistenciaSigeor;using System.Data.Common;using System.Data.SqlClient;using System.Diagnostics;namespace Negocio.Configuracion{    public class EstructuraPerfilNegocio    {        private static SigeorEntities _context = new SigeorEntities();        public static void Insertar(string estPerfilSerializado)        {            try            {                EstructuraPerfil estructuraPerfil =                    Serializador.DeSerializeEntity<EstructuraPerfil>(estPerfilSerializado);                _context = new SigeorEntities();                if (!_context.EstructuraPerfil.Any(u => u.IdEstructura == estructuraPerfil.IdEstructura && u.IdPerfil == estructuraPerfil.IdPerfil))                {                    _context.EstructuraPerfil.Attach(estructuraPerfil);                    _context.ObjectStateManager.ChangeObjectState(estructuraPerfil, System.Data.EntityState.Added);                    _context.SaveChanges();                    //AuditoriaNegocio.InsertarAuditoria(estructuraPerfil, null, TipoAuditoriaEnum.INS);                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo registrar la estructuraPerfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo registrar la estructuraPerfil: " + ex.Message);            }        }        public static void Modificar(string estPerfilSerializado)        {            try            {                var result = Serializador.DeSerializeEntity<EstructuraPerfil>(estPerfilSerializado);                EstructuraPerfil busqueda;                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        busqueda = (from estructuraPerfil in context.EstructuraPerfil                                    where                                        estructuraPerfil.IdPerfil.Equals(result.IdPerfil) &&                                        estructuraPerfil.IdEstructura.Equals(result.IdEstructura)                                    select estructuraPerfil).FirstOrDefault();                        transactionScope.Complete();                        if (result.EntityState == EntityState.Detached)                        {                            _context.EstructuraPerfil.Attach(result);                            _context.ObjectStateManager.ChangeObjectState(result, EntityState.Modified);                        }                        context.EstructuraPerfil.ApplyCurrentValues(result);                        context.SaveChanges();                    }                }                var estructuraPerfilClonado = Reflection.ClonarEntidadAuditoria(busqueda);              //  AuditoriaNegocio.InsertarAuditoria(result, estructuraPerfilClonado, TipoAuditoriaEnum.UPD);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar la estructuraPerfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar la estructuraPerfil: " + ex);            }        }        public static void Eliminar(string estPerfilSerializado)        {            try            {                EstructuraPerfil paramEstPerfil =                    Serializador.DeSerializeEntity<EstructuraPerfil>(estPerfilSerializado);                using (var context = new SigeorEntities())                {                    var result = (from estPerfil in context.EstructuraPerfil                                  where estPerfil.IdEstructura == paramEstPerfil.IdEstructura &&                                        estPerfil.IdPerfil == paramEstPerfil.IdPerfil                                  select estPerfil).FirstOrDefault();                    if (result != null)                    {                        context.EstructuraPerfil.DeleteObject(result);                        context.SaveChanges();                       // AuditoriaNegocio.InsertarAuditoria(result, null, TipoAuditoriaEnum.DEL);                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar la estructuraPerfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar la estructuraPerfil: " + ex);            }        }        public static string ObtenerEstructuraPerfilesPorEstado(bool estado)        {            List<EstructuraPerfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from estructuraPerfil in context.EstructuraPerfil                                  where estructuraPerfil.Estado.Equals(estado)                                  select estructuraPerfil).ToList();                        CargarPerfilEstructura(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo realizar la busqueda de la estructuraPerfil por estado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo realizar la busqueda de la estructuraPerfil por estado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerEstructuraPerfilesPorCoincidencia(string value, bool estado)        {            List<EstructuraPerfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from estructuraPerfil in context.EstructuraPerfil                                  select estructuraPerfil).ToList();                        CargarPerfilEstructura(result);                        result = (from ent in result                                  where ent.DescripcionPerfil.ToUpper().Contains(value.ToUpper()) ||                                        ent.DescripcionEstructura.ToUpper().Contains(value.ToUpper()) ||                                        ent.UrlEstructura.ToUpper().Contains(value.ToUpper()) ||                                        ent.CodigoEstructrua.ToUpper().Contains(value.ToUpper()) &&                                        ent.Estado.Equals(estado)                                  orderby ent.DescripcionEstructura                                  select ent).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las estructuraPerfil's por coincidencia: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener las estructuraPerfil's por coincidencia: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerEstructuraPerfilesPorIdEstructura(string idSerializado)        {            List<EstructuraPerfil> result;            try            {                var id = Serializador.DeSerializeEntity<Guid>(idSerializado);                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from estructuraPerfil in context.EstructuraPerfil                                  where estructuraPerfil.IdEstructura.Equals(id)                                  select estructuraPerfil).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el estructuraPerfil por id: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el estructuraPerfil por id: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerEstructuraPerfilesPorIdPerfil(string idSerializado)        {            List<EstructuraPerfil> result;            try            {                var id = Serializador.DeSerializeEntity<Guid>(idSerializado);                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from estructuraPerfil in context.EstructuraPerfil                                  where estructuraPerfil.IdPerfil.Equals(id)                                  select estructuraPerfil).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el estructuraPerfil por Id del Perfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el estructuraPerfil Id del Perfil: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        private static void CargarPerfilEstructura(List<EstructuraPerfil> EstructuraPerfil)        {            try            {                if (EstructuraPerfil != null)                {                    using (var context = new SigeorEntities())                    {                        foreach (var estructuraPerfil in EstructuraPerfil)                        {                            var resultPerfil = (from perfil in context.Perfil                                                where perfil.Id.Equals(estructuraPerfil.IdPerfil)                                                select perfil).FirstOrDefault();                            var resultEstructura = (from estructura in context.Estructura                                                    where estructura.Id.Equals(estructuraPerfil.IdEstructura)                                                    select estructura).FirstOrDefault();                            if (resultPerfil != null) estructuraPerfil.DescripcionPerfil = resultPerfil.Descripcion;                            if (resultEstructura != null)                            {                                estructuraPerfil.UrlEstructura = resultEstructura.Url;                                estructuraPerfil.CodigoEstructrua = resultEstructura.Codigo;                                estructuraPerfil.DescripcionEstructura = resultEstructura.Descripcion;                            }                        }                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar los los datos adicionales de estructuraPerfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo cargar los los datos adicionales de estructuraPerfil: " + ex);            }        }        public static string ObtenerPerfilEstructuraPaginado(int pagesize, int pageIndex, out int totalRegistros)        {            List<EstructuraPerfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from estructuraPerfil in context.EstructuraPerfil                                  select estructuraPerfil).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                CargarPerfilEstructura(result);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las estructuraPerfil's paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener las estructuraPerfil's paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPerfilEstructuraPorCoincidenciaPaginado(string value, bool estado, int pagesize, int pageIndex, out int totalRegistros)        {            List<EstructuraPerfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from estructuraPerfil in context.EstructuraPerfil                                  select estructuraPerfil).ToList();                        CargarPerfilEstructura(result);                        result = (from ent in result                                  where ent.DescripcionPerfil.ToUpper().Contains(value.ToUpper()) ||                                        ent.DescripcionEstructura.ToUpper().Contains(value.ToUpper()) ||                                        ent.UrlEstructura.ToUpper().Contains(value.ToUpper()) ||                                        ent.CodigoEstructrua.ToUpper().Contains(value.ToUpper()) &&                                        ent.Estado.Equals(estado)                                  orderby ent.DescripcionEstructura                                  select ent).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception e)            {                throw new Exception("No se pudo buscar en la BD.: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPerfilEstructuraPorEstadoPaginado(bool estado, int pagesize, int pageIndex, out int totalRegistros)        {            List<EstructuraPerfilModelo> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from a in context.Estructura                                  join b in context.EstructuraPerfil                                  on a.Id equals b.IdEstructura                                  join c in context.Perfil                                  on b.IdPerfil equals c.Id                                  where b.Estado.Equals(estado)                                  select new EstructuraPerfilModelo                                  {                                      Id = a.Id,                                      Perfil = c.Descripcion,                                      Codigo = a.Codigo,                                      Descripcion = a.Descripcion,                                      Estado = b.Estado                                  }).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList().OrderBy(ent => ent.Descripcion).ToList();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las estructuraPerfil's por estado paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener las estructuraPerfil's por estado paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static void ModificarMasivamentePerfilEstructura(string value, bool estado)        {            try            {                _context = new SigeorEntities();                value = value.ToUpper();                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var result = (from estructuraPerfil in context.EstructuraPerfil                                      select estructuraPerfil).ToList();                        CargarPerfilEstructura(result);                        result = (from estructuraPerfil in context.EstructuraPerfil                                  where (                                      estructuraPerfil.DescripcionPerfil.ToUpper().Contains(value.ToUpper()) ||                                      estructuraPerfil.DescripcionEstructura.ToUpper().Contains(value.ToUpper()) ||                                      estructuraPerfil.UrlEstructura.ToUpper().Contains(value.ToUpper()) ||                                      estructuraPerfil.CodigoEstructrua.ToUpper().Contains(value.ToUpper())) &&                                        estructuraPerfil.Estado.Equals(estado)                                  select estructuraPerfil).ToList();                        transactionScope.Complete();                        foreach (var ep in result)                        {                            ep.Estado = !ep.Estado;                            if (ep.EntityState.Equals(EntityState.Detached))                            {                                context.EstructuraPerfil.Attach(ep);                                context.ObjectStateManager.ChangeObjectState(ep, EntityState.Modified);                            }                            context.EstructuraPerfil.ApplyCurrentValues(ep);                            context.SaveChanges();                        }                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar las estructuraPerfil's de forma masiva: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar las estructuraPerfil's de forma masiva: " + ex);            }        }        public static string ObtenerPerfilEstructuraPorPerfil(string _Idperfil)        {            Guid Idperfil = new Guid(_Idperfil);            List<EstructuraPerfilModelo> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        string sql = "SELECT C.ID,  ISNULL(CONVERT(VARCHAR(50),A.ID),'')   AS IDPERFIL ,A.DESCRIPCION AS PERFIL,C.DESCRIPCION,A.CODIGO,C.URL,CASE WHEN (A.ID IS NULL) THEN CAST(0 AS BIT) ELSE CAST(1 AS BIT) END  AS 'ESTADO' FROM [ADM].[PERFIL] AS A JOIN [ADM].[ESTRUCTURAPERFIL] AS B ON A.ID=B.IDPERFIL RIGHT JOIN [ADM].[ESTRUCTURA] AS C ON B.IDESTRUCTURA=C.ID AND A.ID=@perfil ORDER BY C.NIVEL,C.ORDEN";                        var args = new DbParameter[] { new SqlParameter { ParameterName = "perfil", Value = Idperfil } };                        result = context.ExecuteStoreQuery<EstructuraPerfilModelo>(sql, args).AsQueryable().ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la estructuraPerfil's por Id del Perfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la estructuraPerfil's por Id del Perfil: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public class EstructuraPerfilModelo        {            public Guid Id { set; get; }            public string IdPerfil { set; get; }            public string Perfil { set; get; }            public string Codigo { set; get; }            public string Descripcion { set; get; }            public bool Estado { set; get; }        }    }}