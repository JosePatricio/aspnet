using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Transactions;using Negocio.Utilidades;using PersistenciaSigeor;namespace Negocio.Sigeor.GestionMgl{    public class DepositoNegocio    {        public static string ObtenerDepositos()        {            List<SM_DEPOSITO> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from deposito in context.SM_DEPOSITO                                  orderby deposito.NOMBRE_DEPOSITO                                  select deposito).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar los depositos: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo cargar los depositos: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDepositosPorEstado(string estado)        {            List<SM_DEPOSITO> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from deposito in context.SM_DEPOSITO                                  orderby deposito.NOMBRE_DEPOSITO                                  where deposito.ESTADO.Equals(estado)                                  select deposito).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar los depositos por estado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo cargar los depositos por estado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDepositoPorCodigo(string parametro)        {            SM_DEPOSITO result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from deposito in context.SM_DEPOSITO                                  where deposito.COD_DEPOSITO.Equals(param.IdStringUno)                                  orderby deposito.NOMBRE_DEPOSITO                                  select deposito).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el deposito por codigo: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el deposito por codigo: " + ex);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDespositoPorId(string parametro)        {            string result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from proveedor in context.SM_DEPOSITO                                     where proveedor.COD_DEPOSITO.Equals(param.IdString)                                     select proveedor).FirstOrDefault();                        result = query != null ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el deposito por codigo: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el deposito por codigo: " + ex);            }            return result;        }    }}
