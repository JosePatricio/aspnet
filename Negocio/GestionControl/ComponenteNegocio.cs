using System;using System.Collections.Generic;using System.Data;using System.Linq;using Negocio.Utilidades;using PersistenciaSigeor;using System.Diagnostics;using Negocio.Configuracion;namespace Negocio.GestionControl{    public class ComponenteNegocio    {        private static SigeorEntities _context;        public static void Insertar(string componenteSerializado)        {            try            {                _context = new SigeorEntities();                var componente = Serializador.DeSerializeEntity<S_ESTIMATE_COMPONENT_CODE>(componenteSerializado);                if (_context.S_ESTIMATE_COMPONENT_CODE.ToList().Find(                    ent =>                        ent.COD_TIPOCOMPO.Equals(componente.COD_TIPOCOMPO) &&                        ent.COD_ESTIMACOMPO.Equals(componente.COD_ESTIMACOMPO)) == null)                {                    _context.S_ESTIMATE_COMPONENT_CODE.AddObject(componente);                    _context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(componente, null, TipoAuditoriaEnum.INS);                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo registrar el componente: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo registrar el componente: " + ex);            }        }        public static void Modificar(string componenteSerializado)        {            try            {                _context = new SigeorEntities();                var componente = Serializador.DeSerializeEntity<S_ESTIMATE_COMPONENT_CODE>(componenteSerializado);                if (_context.S_ESTIMATE_COMPONENT_CODE.ToList().Find(ent =>                    ent.COD_TIPOCOMPO.Equals(componente.COD_TIPOCOMPO) &&                        ent.COD_ESTIMACOMPO.Equals(componente.COD_ESTIMACOMPO)) != null)                {                    _context.S_ESTIMATE_COMPONENT_CODE.ApplyCurrentValues(componente);                    _context.SaveChanges();                }                else                {                    throw new Exception("El componente ingresado ya existe");                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar el componente: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar el componente: " + ex);            }        }        public static void Eliminar(string componenteSerializado)        {            try            {                _context = new SigeorEntities();                var componente = Serializador.DeSerializeEntity<S_ESTIMATE_COMPONENT_CODE>(componenteSerializado);                if (_context.S_ESTIMATE_COMPONENT_CODE.ToList().Find(ent =>                     ent.COD_TIPOCOMPO.Equals(componente.COD_TIPOCOMPO) &&                        ent.COD_ESTIMACOMPO.Equals(componente.COD_ESTIMACOMPO)) != null)                {                    _context.S_ESTIMATE_COMPONENT_CODE.Attach(componente);                    _context.ObjectStateManager.ChangeObjectState(componente, EntityState.Deleted);                    _context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(componente, null, TipoAuditoriaEnum.DEL);                }                else                {                    throw new Exception("El componente a eliminar ya no existe");                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar el componente: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar el componente: " + ex);            }        }        public static string ObtenerComponentesPorEstado(string estado)        {            List<S_ESTIMATE_COMPONENT_CODE> result;            try            {                using (var context = new SigeorEntities())                {                    result = (from componente in context.S_ESTIMATE_COMPONENT_CODE                              where componente.ESTADO == estado                              orderby componente.DESCRIPCION                              select componente).ToList();                }                            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los componentes por estado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los componentes por estado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerComponente()        {            List<S_ESTIMATE_COMPONENT_CODE> result;            try            {                using (var context = new SigeorEntities())                {                    result = (from componente in context.S_ESTIMATE_COMPONENT_CODE                              orderby componente.DESCRIPCION                              select componente).ToList();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los componentes: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los componentes: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerComponentePorClave(string clavePrimaria)        {            S_ESTIMATE_COMPONENT_CODE producto;            try            {                var clave = Serializador.DeSerializeEntity<ClaseBasica>(clavePrimaria);                using (var context = new SigeorEntities())                {                    producto = (from componente in context.S_ESTIMATE_COMPONENT_CODE                                where componente.COD_TIPOCOMPO == clave.IdStringUno &&                                      componente.COD_ESTIMACOMPO == clave.IdStringDos                                select componente).FirstOrDefault();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el componente por clave: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el componente por clave: " + ex);            }            return producto != null ? Serializador.SerializeEntity(producto) : null;        }        public static string ObtenerComponentePorCoincidencia(string value, string estado)        {            List<S_ESTIMATE_COMPONENT_CODE> result;            try            {                result = _context.S_ESTIMATE_COMPONENT_CODE.ToList().FindAll(ent =>                   (ent.DESCRIPCION.ToUpper().Contains(value.ToUpper()) &&                   ent.ESTADO.Equals(estado)));                result = result.OrderBy(ent => ent.DESCRIPCION).ToList();                using (var context = new SigeorEntities())                {                    result = (from componente in context.S_ESTIMATE_COMPONENT_CODE                              where componente.DESCRIPCION == value.ToUpper() &&                                    componente.ESTADO == estado                              orderby componente.DESCRIPCION                              select componente).ToList();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los componentes por coincidencia: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los componentes por coincidencia: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }    }}
