using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Transactions;using Negocio.Utilidades;using PersistenciaSigeor;namespace Negocio.Sigeor.GestionMgl{    public class LineaNegocio    {                public static string ObtenerLineas()        {            List<SM_LINEA> result;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from linea in context.SM_LINEA                                  orderby linea.NOM_LINEA                                  select linea).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las lineas existentes: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener las lineas existentes: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerLineasPorEstado(string estado)        {            List<SM_LINEA> result;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from linea in context.SM_LINEA                                  orderby linea.NOM_LINEA                                  where linea.ESTADO.Equals(estado)                                  select linea).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el deposito por codigo: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el las lineas por estado: " +ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerLineaPorCodigo(string parametro)        {            SM_LINEA result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from linea in context.SM_LINEA                                     where linea.COD_LINEA.Equals(param.IdStringUno)                                     select linea).FirstOrDefault();                        }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el deposito por codigo: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el deposito por codigo: " +ex);            }            return result != null ? Serializador.SerializeEntity(result) : null;         }    }}
