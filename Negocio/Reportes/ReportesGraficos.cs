using System;using System.Collections.Generic;using System.Linq;using System.Text;using PersistenciaSigeor;using System.Data.Objects.SqlClient;using Negocio.Utilidades;using System.Transactions;using System.Diagnostics;namespace Negocio.Aretina{    public class ReportesGraficos    {        SigeorEntities contexto = new SigeorEntities();        public static string obtenerTotalesEorEstructuraTodosEstimado()        {            List<Modelo> result = null;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.SC_EORESTRUCTURA.Where(f => f.ESTADO == "R").GroupBy(d => d.FECHA_EOR.Value.Year)                                  .Select(                                      g => new Modelo                                      {                                          Value = g.Sum(s => s.TOTALEST),                                          Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Year),                                          Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Year),                                          Level = 1                                      }).OrderBy(g => g.Name).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los totales de los EOR's Estructura todos los Estimados: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los totales de los EOR's Estructura todos los Estimados: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorEstructuraPorAnioEstimado(string Year)        {            List<Modelo> result = null;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        int anio = 0;                        Int32.TryParse(Year, out anio);                        result = context.SC_EORESTRUCTURA.Where(f => f.FECHA_EOR.Value.Year == anio && f.ESTADO == "R")                            .GroupBy(d => d.FECHA_EOR.Value.Month)                              .Select(                                  g => new Modelo                                  {                                      Value = g.Sum(s => s.TOTALEST),                                      Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                      Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                      Level = 2                                  }).OrderBy(g => g.Name).ToList();                        result.ToList().ForEach(x =>                        {                            x.Name = ObtenerMes(x.Name);                        });                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los totales de los EOR's Estructura Estimados por Anio: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los totales de los EOR's Estructura Estimados por Anio: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result.ToList()) : null;        }        public static string obtenerTotalesEorEstructuraTodosReal()        {            List<Modelo> result = null;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.SC_EORESTRUCTURA.Where(f => f.ESTADO == "R").GroupBy(d => d.FECHA_EOR.Value.Year)                            .Select(                                g => new Modelo                                {                                    Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                    Value = g.Sum(s => s.TOTAL_REAL),                                    Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Year),                                    Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Year),                                    Level = 1                                }).OrderBy(g => g.Name).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los totales de los EOR's Estructura todos los Valores Reales: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los totales de los EOR's Estructura todos los Valores Reales: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorEstructuraRealPorAnio(string Year)        {            List<Modelo> result = null;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        int anio = 0;                        Int32.TryParse(Year, out anio);                        result = context.SC_EORESTRUCTURA.Where(f => f.FECHA_EOR.Value.Year == anio && f.ESTADO == "R")                            .GroupBy(d => d.FECHA_EOR.Value.Month)                              .Select(                                  g => new Modelo                                  {                                      Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                      Value = g.Sum(s => s.TOTAL_REAL),                                      Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                      Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                      Level = 2                                  }).OrderBy(g => g.Name).ToList();                        result.ToList().ForEach(x =>                        {                            x.Name = ObtenerMes(x.Name);                        });                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los totales de los EOR's Estructura Valores Reales por Anio: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los totales de los EOR's Estructura Valores Reales por Anio: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorMaquinariaTodosEstimado()        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORMAQUINARIA.Where(f => f.ESTADO == "R").GroupBy(d => d.FECHA_EORMAQ.Value.Year)                             .Select(                                 g => new Modelo                                 {                                     Value = g.Sum(s => s.TOTALMAQ),                                     Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Year),                                     Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Year),                                     Level = 1                                 }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorMaquinariaPorAnioEstimado(string Year)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORMAQUINARIA.Where(f => f.FECHA_EORMAQ.Value.Year == anio && f.ESTADO == "R")                         .GroupBy(d => d.FECHA_EORMAQ.Value.Month)                           .Select(                               g => new Modelo                               {                                   Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Month),                                   Value = g.Sum(s => s.TOTALMAQ),                                   Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Month),                                   Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Month),                                   Level = 2                               }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result.ToList()) : null;        }        public static string obtenerTotalesEorMaquinariaTodosReal()        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORMAQUINARIA.Where(f => f.ESTADO == "R").GroupBy(d => d.FECHA_EORMAQ.Value.Year)                       .Select(                           g => new Modelo                           {                               Value = g.Sum(s => s.TOTAL_REAL),                               Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Year),                               Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Year),                               Level = 1                           }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result.ToList()) : null;        }        public static string obtenerTotalesEorMaquinariaRealPorAnio(string Year)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORMAQUINARIA.Where(f => f.FECHA_EORMAQ.Value.Year == anio && f.ESTADO == "R")                         .GroupBy(d => d.FECHA_EORMAQ.Value.Month)                           .Select(                               g => new Modelo                               {                                   Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Month),                                   Value = g.Sum(s => s.TOTAL_REAL),                                   Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Month),                                   Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EORMAQ.Value.Month),                                   Level = 2                               }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result.ToList()) : null;        }        public static string obtenerTotalesEorTransitoTodosEstimado()        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORTRANSITO.                Where(f => (f.ESTADOEST == 8 && f.ESTADOMAQ == 8) ||                (f.ESTADOEST == 8 && f.ESTADOMAQ == null) ||                (f.ESTADOMAQ == 8 && f.ESTADOEST == null))                .GroupBy(d => d.FECHA_EOR.Value.Year)                             .Select(                                 g => new Modelo                                 {                                     Value = g.Sum(s => ((s.TOTALEST != null ? s.TOTALEST : 0) + (s.TOTALMAQ != null ? s.TOTALMAQ : 0))),                                     Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Year),                                     Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Year),                                     Level = 1                                 }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result.ToList()) : null;        }        public static string obtenerTotalesEorTransitoPorAnioEstimado(string Year)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORTRANSITO.                         Where(f => f.FECHA_EOR.Value.Year == anio &&                         (f.ESTADOEST == 8 && f.ESTADOMAQ == 8) ||                         (f.ESTADOEST == 8 && f.ESTADOMAQ == null) ||                         (f.ESTADOMAQ == 8 && f.ESTADOEST == null))                         .GroupBy(d => d.FECHA_EOR.Value.Month)                           .Select(                               g => new Modelo                               {                                   Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                   Value = g.Sum(s => ((s.TOTALEST != null ? s.TOTALEST : 0) + (s.TOTALMAQ != null ? s.TOTALMAQ : 0))),                                   Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                   Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                   Level = 2                               }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result.ToList()) : null;        }        public static string obtenerTotalesEorTransitoTodosReal()        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORTRANSITO.               Where(f => (f.ESTADOEST == 8 && f.ESTADOMAQ == 8) ||               (f.ESTADOEST == 8 && f.ESTADOMAQ == null) ||               (f.ESTADOMAQ == 8 && f.ESTADOEST == null))               .GroupBy(d => d.FECHA_EOR.Value.Year)                       .Select(                           g => new Modelo                           {                               Value = g.Sum(s => s.TOTAL_REAL),                               Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Year),                               Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Year),                               Level = 1                           }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorTransitoRealPorAnio(string Year)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORTRANSITO.Where(f => f.FECHA_EOR.Value.Year == anio &&                   (f.ESTADOEST == 8 && f.ESTADOMAQ == 8) ||                   (f.ESTADOEST == 8 && f.ESTADOMAQ == null) ||                   (f.ESTADOMAQ == 8 && f.ESTADOEST == null))                   .GroupBy(d => d.FECHA_EOR.Value.Month)                     .Select(                         g => new Modelo                         {                             Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                             Value = g.Sum(s => s.TOTAL_REAL),                             Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                             Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                             Level = 2                         }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        //Reportes Totales Estimado - Real Por Linea        public static string obtenerTotalesEorEstructuraTodosEstimadoPorLinea(string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORESTRUCTURA.               Join(context.SC_EIR, a => a.ID_EIR, b => b.ID_EIR, (a, b) => new { SC_EORESTRUCTURA = a, SC_EIR = b }).               Where(ab => ab.SC_EORESTRUCTURA.ESTADO == "R" && ab.SC_EIR.COD_LINEA == linea).               GroupBy(d => d.SC_EORESTRUCTURA.FECHA_EOR.Value.Year)                            .Select(                                g => new Modelo                                {                                    Value = g.Sum(s => s.SC_EORESTRUCTURA.TOTALEST),                                    Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORESTRUCTURA.FECHA_EOR.Value.Year),                                    Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORESTRUCTURA.FECHA_EOR.Value.Year),                                    Level = 1                                }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorEstructuraPorAnioEstimadoPorLinea(string Year, string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORESTRUCTURA.                       Join(context.SC_EIR, a => a.ID_EIR, b => b.ID_EIR, (a, b) => new { SC_EORESTRUCTURA = a, SC_EIR = b })                       .Where(ab => ab.SC_EORESTRUCTURA.FECHA_EOR.Value.Year == anio && ab.SC_EORESTRUCTURA.ESTADO == "R" && ab.SC_EIR.COD_LINEA == linea)                       .GroupBy(d => d.SC_EORESTRUCTURA.FECHA_EOR.Value.Month)                         .Select(                             g => new Modelo                             {                                 Value = g.Sum(s => s.SC_EORESTRUCTURA.TOTALEST),                                 Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORESTRUCTURA.FECHA_EOR.Value.Month),                                 Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORESTRUCTURA.FECHA_EOR.Value.Month),                                 Level = 2                             }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorEstructuraTodosRealPorLinea(string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORESTRUCTURA.                Join(context.SC_EIR, a => a.ID_EIR, b => b.ID_EIR, (a, b) => new { SC_EORESTRUCTURA = a, SC_EIR = b }).                Where(ab => ab.SC_EORESTRUCTURA.ESTADO == "R" && ab.SC_EIR.COD_LINEA == linea).GroupBy(d => d.SC_EORESTRUCTURA.FECHA_EOR.Value.Year)                        .Select(                            g => new Modelo                            {                                Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORESTRUCTURA.FECHA_EOR.Value.Month),                                Value = g.Sum(s => s.SC_EORESTRUCTURA.TOTAL_REAL),                                Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORESTRUCTURA.FECHA_EOR.Value.Year),                                Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORESTRUCTURA.FECHA_EOR.Value.Year),                                Level = 1                            }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorEstructuraRealPorAnioPorLinea(string Year, string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORESTRUCTURA.Where(f => f.FECHA_EOR.Value.Year == anio && f.ESTADO == "R")                        .GroupBy(d => d.FECHA_EOR.Value.Month)                          .Select(                              g => new Modelo                              {                                  Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                  Value = g.Sum(s => s.TOTAL_REAL),                                  Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                  Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().FECHA_EOR.Value.Month),                                  Level = 2                              }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorMaquinariaTodosEstimadoPorLinea(string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORMAQUINARIA.                Join(context.SC_EIR, a => a.ID_EIR, b => b.ID_EIR, (a, b) => new { SC_EORMAQUINARIA = a, SC_EIR = b }).                Where(ab => ab.SC_EORMAQUINARIA.ESTADO == "R" && ab.SC_EIR.COD_LINEA == linea).                GroupBy(d => d.SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Year)                             .Select(                                 g => new Modelo                                 {                                     Value = g.Sum(s => s.SC_EORMAQUINARIA.TOTALMAQ),                                     Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Year),                                     Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Year),                                     Level = 1                                 }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorMaquinariaPorAnioEstimadoPorLinea(string Year, string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORMAQUINARIA.                       Join(context.SC_EIR, a => a.ID_EIR, b => b.ID_EIR, (a, b) => new { SC_EORMAQUINARIA = a, SC_EIR = b }).                       Where(ab => ab.SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Year == anio && ab.SC_EORMAQUINARIA.ESTADO == "R" && ab.SC_EIR.COD_LINEA == linea).                       GroupBy(d => d.SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Month)                         .Select(                             g => new Modelo                             {                                 Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Month),                                 Value = g.Sum(s => s.SC_EORMAQUINARIA.TOTALMAQ),                                 Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Month),                                 Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Month),                                 Level = 2                             }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorMaquinariaTodosRealPorLinea(string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORMAQUINARIA.               Join(context.SC_EIR, a => a.ID_EIR, b => b.ID_EIR, (a, b) => new { SC_EORMAQUINARIA = a, SC_EIR = b }).               Where(ab => ab.SC_EORMAQUINARIA.ESTADO == "R" && ab.SC_EIR.COD_LINEA == linea).               GroupBy(d => d.SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Year)                       .Select(                           g => new Modelo                           {                               Value = g.Sum(s => s.SC_EORMAQUINARIA.TOTAL_REAL),                               Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Year),                               Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Year),                               Level = 1                           }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorMaquinariaRealPorAnioPorLinea(string Year, string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORMAQUINARIA.                        Join(context.SC_EIR, a => a.ID_EIR, b => b.ID_EIR, (a, b) => new { SC_EORMAQUINARIA = a, SC_EIR = b }).                        Where(ab => ab.SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Year == anio && ab.SC_EORMAQUINARIA.ESTADO == "R" && ab.SC_EIR.COD_LINEA == linea)                        .GroupBy(d => d.SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Month)                          .Select(                              g => new Modelo                              {                                  Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Month),                                  Value = g.Sum(s => s.SC_EORMAQUINARIA.TOTAL_REAL),                                  Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Month),                                  Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORMAQUINARIA.FECHA_EORMAQ.Value.Month),                                  Level = 2                              }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorTransitoTodosEstimadoPorLinea(string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORTRANSITO.                Join(context.SD_EORTRANSITO, a => a.NUM_EORTRANSITO, b => b.NUM_EORTRANSITO, (a, b) => new { SC_EORTRANSITO = a, D_EORTRANSITO = b }).                Where(ab => (ab.SC_EORTRANSITO.ESTADOEST == 8 && ab.SC_EORTRANSITO.ESTADOMAQ == 8)                && (ab.D_EORTRANSITO.COD_LINEA == linea) ||                (ab.SC_EORTRANSITO.ESTADOEST == 8 && ab.SC_EORTRANSITO.ESTADOMAQ == null) ||                (ab.SC_EORTRANSITO.ESTADOMAQ == 8 && ab.SC_EORTRANSITO.ESTADOEST == null)).                GroupBy(d => d.SC_EORTRANSITO.FECHA_EOR.Value.Year)                             .Select(                                 g => new Modelo                                 {                                     Value = g.Sum(s => ((s.SC_EORTRANSITO.TOTALEST != null ? s.SC_EORTRANSITO.TOTALEST : 0) + (s.SC_EORTRANSITO.TOTALMAQ != null ? s.SC_EORTRANSITO.TOTALMAQ : 0))),                                     Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Year),                                     Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Year),                                     Level = 1                                 }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorTransitoPorAnioEstimadoPorLinea(string Year, string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORTRANSITO.                       Join(context.SD_EORTRANSITO, a => a.NUM_EORTRANSITO, b => b.NUM_EORTRANSITO, (a, b) => new { SC_EORTRANSITO = a, D_EORTRANSITO = b }).                       Where(ab => ab.SC_EORTRANSITO.FECHA_EOR.Value.Year == anio &&                       (ab.D_EORTRANSITO.COD_LINEA == linea) &&                       (ab.SC_EORTRANSITO.ESTADOEST == 8 && ab.SC_EORTRANSITO.ESTADOMAQ == 8) ||                       (ab.SC_EORTRANSITO.ESTADOEST == 8 && ab.SC_EORTRANSITO.ESTADOMAQ == null) ||                       (ab.SC_EORTRANSITO.ESTADOMAQ == 8 && ab.SC_EORTRANSITO.ESTADOEST == null))                       .GroupBy(d => d.SC_EORTRANSITO.FECHA_EOR.Value.Month)                         .Select(                             g => new Modelo                             {                                 Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Month),                                 Value = g.Sum(s => ((s.SC_EORTRANSITO.TOTALEST != null ? s.SC_EORTRANSITO.TOTALEST : 0) + (s.SC_EORTRANSITO.TOTALMAQ != null ? s.SC_EORTRANSITO.TOTALMAQ : 0))),                                 Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Month),                                 Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Month),                                 Level = 2                             }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorTransitoTodosRealPorLinea(string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SC_EORTRANSITO.               Join(context.SD_EORTRANSITO, a => a.NUM_EORTRANSITO, b => b.NUM_EORTRANSITO, (a, b) => new { SC_EORTRANSITO = a, D_EORTRANSITO = b }).               Where(ab => (ab.SC_EORTRANSITO.ESTADOEST == 8 && ab.SC_EORTRANSITO.ESTADOMAQ == 8)               && (ab.D_EORTRANSITO.COD_LINEA == linea) ||               (ab.SC_EORTRANSITO.ESTADOEST == 8 && ab.SC_EORTRANSITO.ESTADOMAQ == null) ||               (ab.SC_EORTRANSITO.ESTADOMAQ == 8 && ab.SC_EORTRANSITO.ESTADOEST == null))               .GroupBy(d => d.SC_EORTRANSITO.FECHA_EOR.Value.Year)                       .Select(                           g => new Modelo                           {                               Value = g.Sum(s => s.SC_EORTRANSITO.TOTAL_REAL),                               Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Year),                               Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Year),                               Level = 1                           }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string obtenerTotalesEorTransitoRealPorAnioPorLinea(string Year, string linea)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    int anio = 0;                    Int32.TryParse(Year, out anio);                    result = context.SC_EORTRANSITO.                       Join(context.SD_EORTRANSITO, a => a.NUM_EORTRANSITO, b => b.NUM_EORTRANSITO, (a, b) => new { SC_EORTRANSITO = a, D_EORTRANSITO = b }).                       Where(ab => ab.SC_EORTRANSITO.FECHA_EOR.Value.Year == anio &&                       (ab.D_EORTRANSITO.COD_LINEA == linea) &&                       (ab.SC_EORTRANSITO.ESTADOEST == 8 && ab.SC_EORTRANSITO.ESTADOMAQ == 8) ||                       (ab.SC_EORTRANSITO.ESTADOEST == 8 && ab.SC_EORTRANSITO.ESTADOMAQ == null) ||                       (ab.SC_EORTRANSITO.ESTADOMAQ == 8 && ab.SC_EORTRANSITO.ESTADOEST == null))                       .GroupBy(d => d.SC_EORTRANSITO.FECHA_EOR.Value.Month)                         .Select(                             g => new Modelo                             {                                 Id = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Month),                                 Value = g.Sum(s => s.SC_EORTRANSITO.TOTAL_REAL),                                 Name = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Month),                                 Drilldown = SqlFunctions.StringConvert((double)g.FirstOrDefault().SC_EORTRANSITO.FECHA_EOR.Value.Month),                                 Level = 2                             }).OrderBy(g => g.Name).ToList();                    result.ToList().ForEach(x =>                    {                        x.Name = ObtenerMes(x.Name);                    });                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result.ToList()) : null;        }        public static string obtenerLineasPorEstado(string estado)        {            List<Modelo> result = null;            TransactionOptions transactionOptions = new TransactionOptions            {                IsolationLevel = IsolationLevel.ReadUncommitted            };            using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))            {                using (var context = new SigeorEntities())                {                    result = context.SM_LINEA.Where(dd => dd.ESTADO == estado).                  Select(                      g => new Modelo                      {                          Id = g.COD_LINEA,                          Name = g.NOM_LINEA,                      }).OrderBy(g => g.Name).ToList();                }                transactionScope.Complete();            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        private static string ObtenerMes(string numeroMes)        {            string mes = string.Empty;            switch (numeroMes.Trim())            {                case "1": mes = "Enero"; break;                case "2": mes = "Febrero"; break;                case "3": mes = "Marzo"; break;                case "4": mes = "Abril"; break;                case "5": mes = "Mayo"; break;                case "6": mes = "Junio"; break;                case "7": mes = "Julio"; break;                case "8": mes = "Agosto"; break;                case "9": mes = "Septiembre"; break;                case "10": mes = "Octubre"; break;                case "11": mes = "Noviembre"; break;                case "12": mes = "Diciembre"; break;            }            return mes;        }        public class Modelo        {            public string Id { get; set; }            public decimal? Value { get; set; }            public string Name { get; set; }            public string Drilldown { get; set; }            public int Level { get; set; }        }    }}
