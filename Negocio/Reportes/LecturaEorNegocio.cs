using System;using System.Collections.Generic;using System.Linq;using System.Net.Sockets;using System.Text;using System.Transactions;using Negocio.Utilidades;using PersistenciaSigeor;namespace Negocio.Aretina{    public class LecturaEorNegocio    {        #region Inicio Lectura de Cabeceras EOR's        public static string ObtenerEorEstructuraPorNumEor(string parametro)        {            string result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from cabeceraEor in context.SC_EORESTRUCTURA                                     where cabeceraEor.NUM_EOREST.Trim().Equals(param.IdStringUno) &&                                           cabeceraEor.COD_DEPOSITO.Trim().Equals(param.IdStringDos) &&                                           cabeceraEor.APROBADO.Trim().Equals(param.EstadoString)                                     select cabeceraEor).FirstOrDefault();                        var test = ObtenerEgresosProductosPorNumEorCodDeposito(parametro);                        if (query != null)                        {                            var detalle = ObtenerDetalleEorEstructuraPorNumEor(parametro);                            query.DetalleEorEstructura = !string.IsNullOrEmpty(detalle)                                ? Serializador.DeSerializeEntity<List<SD_EORESTRUCTURA>>(detalle)                                : new List<SD_EORESTRUCTURA>();                            param.IdStringUno = query.COD_DEPOSITO;                            var deposito = ObtenerDepositoPorCodigo(Serializador.SerializeEntity(param));                            query.CampoDeposito = !string.IsNullOrEmpty(deposito)                                ? Serializador.DeSerializeEntity<SM_DEPOSITO>(deposito)                                : new SM_DEPOSITO();                            param.IdStringUno = query.COD_RESPONSABLE;                            var responsable = ObtenerResponsablePorCodigo(Serializador.SerializeEntity(param));                            query.CampoResponsable = !string.IsNullOrEmpty(responsable)                                ? Serializador.DeSerializeEntity<S_ESTIMATE_PARTY_RESPON>(deposito)                                : new S_ESTIMATE_PARTY_RESPON();                            param.IdStringUno = query.ID_EIR;                            var eir = ObtenerEirPorCodigo(Serializador.SerializeEntity(param));                            query.CampoEir = !string.IsNullOrEmpty(eir)                                ? Serializador.DeSerializeEntity<SC_EIR>(eir)                                : new SC_EIR();                        }                        result = query != null ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                throw new Exception("No se pudo obtener el Eor por estructura: " + ex.Message);            }            return result;        }        public static string ObtenerEorMaquinariaPorNumEor(string parametro)        {            string result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from cabeceraEor in context.SC_EORMAQUINARIA                                     where cabeceraEor.NUM_EORMAQ.Trim().Equals(param.IdStringUno) &&                                           cabeceraEor.COD_DEPOSITO.Trim().Equals(param.IdStringDos) &&                                         //cabeceraEor.COD_RESPONSABLE.Trim().Equals(param.IdStringTres) &&                                           cabeceraEor.APROBADO.Trim().Equals(param.EstadoString)                                     select cabeceraEor).FirstOrDefault();                        if (query != null)                        {                            var detalle = ObtenerDetalleEorMaquinariaPorNumEor(parametro);                            query.DetalleEorMaquinaria = !string.IsNullOrEmpty(detalle)                                ? Serializador.DeSerializeEntity<List<SD_EORMAQUINARIA>>(detalle)                                : new List<SD_EORMAQUINARIA>();                            param.IdStringUno = query.COD_DEPOSITO;                            var deposito = ObtenerDepositoPorCodigo(Serializador.SerializeEntity(param));                            query.CampoDeposito = !string.IsNullOrEmpty(deposito)                                ? Serializador.DeSerializeEntity<SM_DEPOSITO>(deposito)                                : new SM_DEPOSITO();                            param.IdStringUno = query.COD_RESPONSABLE;                            var responsable = ObtenerResponsablePorCodigo(Serializador.SerializeEntity(param));                            query.CampoResponsable = !string.IsNullOrEmpty(responsable)                                ? Serializador.DeSerializeEntity<S_ESTIMATE_PARTY_RESPON>(deposito)                                : new S_ESTIMATE_PARTY_RESPON();                            param.IdStringUno = query.ID_EIR;                            var eir = ObtenerEirPorCodigo(Serializador.SerializeEntity(param));                            query.CampoEir = !string.IsNullOrEmpty(eir)                                ? Serializador.DeSerializeEntity<SC_EIR>(eir)                                : new SC_EIR();                        }                        result = query != null ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception)            {                throw new Exception("No se pudo obtener el Eor por maquinaria");            }            return result;        }        public static string ObtenerEorTransitoPorNumEor(string parametro)        {            string result = null;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        if (param.Descripcion.Equals("EST"))                        {                            var cabeceraEor = context.SC_EORTRANSITO.ToList().Find(ent =>                                ent.NUM_EORTRANSITO.Equals(param.IdStringUno) &&                                ent.COD_DEPOSITO.Equals(param.IdStringDos) &&                                ent.COD_RESPONSABLEEST.Equals(param.IdStringTres) &&                                ent.APROBADOEST.Equals(param.EstadoString));                            result = cabeceraEor != null ? Serializador.SerializeEntity(cabeceraEor) : null;                        }                        if (param.Descripcion.Equals("MAQ"))                        {                            var cabeceraEor = context.SC_EORTRANSITO.ToList().Find(ent =>                                ent.NUM_EORTRANSITO.Equals(param.IdStringUno) &&                                ent.COD_DEPOSITO.Equals(param.IdStringDos) &&                                ent.COD_RESPONSABLEMAQ.Equals(param.IdStringTres) &&                                ent.APROBADOMAQ.Equals(param.EstadoString));                            result = cabeceraEor != null ? Serializador.SerializeEntity(cabeceraEor) : null;                        }                    }                    transactionScope.Complete();                }            }            catch (Exception)            {                throw new Exception("No se pudo obtener el Eor por transito");            }            return result;        }        #endregion Fin Lectura de Cabeceras EOR's        #region Inicio Lectura de Detalle EOR's        public static string ObtenerDetalleEorEstructuraPorNumEor(string parametro)        {            string result = null;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from detalleEor in context.SD_EORESTRUCTURA                                     where detalleEor.NUM_EOREST.Trim().Equals(param.IdStringUno) &&                                           detalleEor.COD_PARTY.Trim().Equals(param.IdStringTres) &&                                           detalleEor.AproRepara.Trim().Equals(param.EstadoString)                                     select detalleEor).ToList();                        if (query.Any())                        {                            var dEorestructura = query.FirstOrDefault();                            if (dEorestructura != null)                            {                                param.IdStringUno = dEorestructura.COD_LINEA;                                var resultLinea = ObtenerLineaPorCodigo(Serializador.SerializeEntity(param));                                var linea = !string.IsNullOrEmpty(resultLinea)                                    ? Serializador.DeSerializeEntity<SM_LINEA>(resultLinea)                                    : new SM_LINEA();                                var count = 1;                                query.ForEach(ent =>                                {                                    ent.Linea = linea;                                    ent.SecuencialDetalle = count++;                                });                            }                            result = query.Any() ? Serializador.SerializeEntity(query) : null;                        }                    }                    transactionScope.Complete();                }            }            catch (Exception)            {                throw new Exception("No se pudo obtener el Eor por estructura");            }            return result;        }        public static string ObtenerDetalleEorMaquinariaPorNumEor(string parametro)        {            string result = null;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from detalle in context.SD_EORMAQUINARIA                                     where detalle.NUM_EORMAQ.Trim().Equals(param.IdStringUno) &&                                           detalle.COD_PARTY.Trim().Equals(param.IdStringTres) &&                                           detalle.AproRepara.Trim().Equals(param.EstadoString)                                     select detalle).ToList();                        if (query.Any())                        {                            var dEorestructura = query.FirstOrDefault();                            if (dEorestructura != null)                            {                                param.IdStringUno = dEorestructura.COD_LINEA;                                var resultLinea = ObtenerLineaPorCodigo(Serializador.SerializeEntity(param));                                var linea = !string.IsNullOrEmpty(resultLinea)                                    ? Serializador.DeSerializeEntity<SM_LINEA>(resultLinea)                                    : new SM_LINEA();                                var count = 1;                                query.ForEach(ent =>                                {                                    ent.Linea = linea;                                    ent.SecuencialDetalle = count++;                                });                            }                            result = query.Any() ? Serializador.SerializeEntity(query) : null;                        }                    }                    transactionScope.Complete();                }            }            catch (Exception)            {                throw new Exception("No se pudo obtener el Eor por estructura");            }            return result;        }        #endregion Fin Lectura de Detalle EOR's        #region Inicio Lectura de Linea        public static string ObtenerLineaPorCodigo(string parametro)        {            string result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from linea in context.SM_LINEA                                     where linea.COD_LINEA.Equals(param.IdStringUno)                                     select linea).FirstOrDefault();                        result = query != null ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception)            {                throw new Exception("No se pudo obtener el Eor por estructura");            }            return result;        }        #endregion Fin Lectura de Linea        #region Inicio Lectura de Deposito        public static string ObtenerDepositoPorCodigo(string parametro)        {            string result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from deposito in context.SM_DEPOSITO                                     where deposito.COD_DEPOSITO.Equals(param.IdStringUno)                                     select deposito).FirstOrDefault();                        result = query != null ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception)            {                throw new Exception("No se pudo obtener el Eor por estructura");            }            return result;        }        #endregion Fin Lectura de Deposito        #region Inicio Lectura de Responsable        public static string ObtenerResponsablePorCodigo(string parametro)        {            string result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from responsable in context.S_ESTIMATE_PARTY_RESPON                                     where responsable.COD_PARTY.Equals(param.IdStringUno)                                     select responsable).FirstOrDefault();                        result = query != null ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception)            {                throw new Exception("No se pudo obtener el responsable");            }            return result;        }        #endregion Fin Lectura de Responsable        #region Inicio Lectura de Eir        public static string ObtenerEirPorCodigo(string parametro)        {            string result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from eir in context.SC_EIR                                     where eir.ID_EIR.Equals(param.IdStringUno)                                     select eir).FirstOrDefault();                        result = Serializador.SerializeEntity(query);                    }                    transactionScope.Complete();                }            }            catch (Exception)            {                throw new Exception("No se pudo obtener el Eor por estructura");            }            return result;        }        #endregion Fin Lectura de Deposito        #region Inicio de Lectura de Productos por EOR [Inv_H_CEgrProducto] y [Inv_H_DEgrProducto]        public static string ObtenerCabeceraEgresoProductosPorNumEorCodDeposito(string parametro)        {            string result = null;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from cabEgresoProductos in context.SInv_H_CEgrProducto                                     where cabEgresoProductos.Num_Eor.Equals(param.IdStringUno) &&                                           cabEgresoProductos.Cod_Deposito.Equals(param.IdStringDos)                                     select cabEgresoProductos).ToList();                        result = query.Any() ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                throw new Exception("No se pudo obtener los productos del EOR: " + ex.Message);            }            return result;        }        public static string ObtenerDetalleEgresoProductosPorNumEorCodDeposito(string parametro)        {            string result = null;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from cabEgresoProductos in context.SInv_H_DEgrProducto                                     where cabEgresoProductos.Id_EgrProducto.Equals(param.IdStringUno)                                     select cabEgresoProductos).ToList();                        result = query.Any() ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                throw new Exception("No se pudo obtener los productos del EOR: " + ex.Message);            }            return result;        }        public static string ObtenerProductoPorId(string codigoProducto)        {            string result = null;            try            {                //var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var query = (from producto in context.SInv_M_Producto                                     where producto.id_Producto.Trim().Equals(codigoProducto)                                     select producto).FirstOrDefault();                        result = query != null ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                throw new Exception("No se pudo obtener el producto por Id: " + ex.Message);            }            return result;        }        public static string ObtenerEgresosProductosPorNumEorCodDeposito(string parametro)        {            string result;            try            {                var resultCabeceraEgreso = ObtenerCabeceraEgresoProductosPorNumEorCodDeposito(parametro);                var listaCabeceraEgresos = !string.IsNullOrEmpty(resultCabeceraEgreso)                    ? Serializador.DeSerializeEntity<List<SInv_H_CEgrProducto>>(resultCabeceraEgreso) : new List<SInv_H_CEgrProducto>();                var listaDetalleEgresos = new List<SInv_H_DEgrProducto>();                foreach (var resultDetalle in listaCabeceraEgresos.Select(cabecera => new ClaseBasica { IdStringUno = cabecera.Id_EgrProducto }).Select(                    clave => ObtenerDetalleEgresoProductosPorNumEorCodDeposito(Serializador.SerializeEntity(clave))).Where(resultDetalle => !string.IsNullOrEmpty(resultDetalle)))                {                    listaDetalleEgresos.AddRange(Serializador.DeSerializeEntity<List<SInv_H_DEgrProducto>>(resultDetalle));                }                var count = 0;                listaDetalleEgresos.ForEach(ent =>                {                    var resultProducto = ObtenerProductoPorId(ent.id_producto);                    ent.Producto = !string.IsNullOrEmpty(resultProducto)                        ? Serializador.DeSerializeEntity<SInv_M_Producto>(resultProducto)                        : new SInv_M_Producto();                    ent.SecuencialProducto = ++count;                });                result = listaDetalleEgresos.Any() ? Serializador.SerializeEntity(listaDetalleEgresos) : null;            }            catch (Exception ex)            {                throw new Exception("No se pudo obtener los productos del EOR: " + ex.Message);            }            return result;        }        #endregion Inicio de Lectura de Productos por EOR [Inv_H_CEgrProducto] y [Inv_H_DEgrProducto]        #region Inicio de Lecturas de Eor Por Deposito        public static string ObtenerEorEstructuraPorDeposito(string parametro)        {            string result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {using (var context = new SigeorEntities())                    {                        List<SC_EORESTRUCTURA> query;                        if (!string.IsNullOrEmpty(param.EstadoString))                        {                            query = (from cab in context.SC_EORESTRUCTURA                                     where cab.COD_DEPOSITO.Equals(param.IdString)                                     select cab).ToList();                        }                        else                        {                            query = (from cab in context.SC_EORESTRUCTURA                                     where cab.COD_DEPOSITO.Equals(param.IdString) &&                                           cab.ESTADO.Equals(param.EstadoString)                                     select cab).ToList();                        }                        result = query.Any() ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                throw new Exception("No se pudo obtener los Eor de Estructura por deposito: " + ex.Message);            }            return result;        }        public static string ObtenerEorMaquinariaPorDeposito(string parametro)        {            string result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        List<SC_EORMAQUINARIA> query;                        if (!string.IsNullOrEmpty(param.EstadoString))                        {                            query = (from cab in context.SC_EORMAQUINARIA                                     where cab.COD_DEPOSITO.Equals(param.IdString)                                     select cab).ToList();                        }                        else                        {                            query = (from cab in context.SC_EORMAQUINARIA                                     where cab.COD_DEPOSITO.Equals(param.IdString) &&                                           cab.ESTADO.Equals(param.EstadoString)                                     select cab).ToList();                        }                        result = query.Any() ? Serializador.SerializeEntity(query) : null;                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                throw new Exception("No se pudo obtener los Eor de Maquinaria por deposito: " + ex.Message);            }            return result;        }        //public static string ObtenerEorTransitoPorDeposito(string parametro)        //{        //    string result;        //    try        //    {        //        var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);        //        var transactionOptions = new TransactionOptions        //        {        //            IsolationLevel = IsolationLevel.ReadUncommitted        //        };        //        using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))        //        {        //            using (var context = new SigeorEntities())        //            {        //                var query = (from cab in context.SC_EORTRANSITO        //                             //join det in context.SD_EORESTRUCTURA on cab.NUM_EOREST equals det.NUM_EOREST        //                             where cab.COD_DEPOSITO.Equals(param.IdString) &&        //                                cab..Equals(param.EstadoString)        //                             select cab).ToList();        //                result = query.Any() ? Serializador.SerializeEntity(query) : null;        //            }        //            transactionScope.Complete();        //        }        //    }        //    catch (Exception ex)        //    {        //        throw new Exception("No se pudo obtener los Eor de Maquianria por deposito: " + ex.Message);        //    }        //    return result;        //}        #endregion Inicio de Lecturas de Eor Por Deposito        //#region Inicio de Lecturas de Eor Por Deposito        //#endregion Inicio de Lecturas de Eor Por Deposito    }}
