using System;using System.Collections.Generic;using System.Linq;using Negocio.Utilidades;using PersistenciaSigeor;using CoordenadasEkey = PersistenciaSigeor.CoordenadasEkey;using System.Transactions;using System.Diagnostics;namespace Negocio.Autenticacion{    public class EkeyNegocio    {        public static SigeorEntities _context = new SigeorEntities();        public static void Insertar(EKey ekey)        {            try            {                _context.EKey.AddObject(ekey);                _context.SaveChanges();            }            catch (Exception e)            {                Log.WriteEntry("No se pudo registrar el ekey: " + e, EventLogEntryType.Error);                throw new Exception("No se pudo registrar el ekey: " + e.Message);            }        }        /// <summary>        /// Insercion del Ekey con todas sus coordenadas        /// </summary>        /// <param name="ekey">Objeto Ekey </param>        /// <param name="listaCoordenadasEkey">Lista de Coordenadas del Ekey</param>        public static void Insertar(EKey ekey, List<CoordenadasEkey> listaCoordenadasEkey)        {            try            {                Insertar(ekey);                CoordenadasEkeyNegocio.Insertar(listaCoordenadasEkey);            }            catch (Exception e)            {                Log.WriteEntry("No se pudo registrar el ekey con la lista de coordenadas: " + e, EventLogEntryType.Error);                throw new Exception("No se pudo registrar el ekey con la lista de coordenadas: " + e.Message);            }        }        public static void Modificar(EKey ekey)        {            try            {                _context.EKey.ApplyCurrentValues(ekey);                _context.SaveChanges();            }            catch (Exception e)            {                Log.WriteEntry("No se pudo modificar el ekey: " + e, EventLogEntryType.Error);                throw new Exception("No se pudo modificar el ekey: " + e.Message);            }        }        public static void Eliminar(EKey ekey)        {            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var result = (from key in context.EKey                                      where ekey.Id == key.Id                                      select key).FirstOrDefault();                        context.EKey.DeleteObject(result);                        context.SaveChanges();                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                Log.WriteEntry("No se pudo eliminar el ekey: " + e, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar el ekey: " + e.Message);            }        }        /// <summary>        /// Retorna el ekey asociado al usuario, se buscara solo los registros activos        /// </summary>        /// <param name="cedula">Cedula del usuario </param>        /// <returns></returns>        public static string ObtenerEkeyPorCedulaUsuario(string cedula)        {            EKey result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from ekey in context.EKey                                  where ekey.CedulaUsuario == cedula && ekey.Estado                                  select ekey).FirstOrDefault();                    }                    transactionScope.Complete();                }                           }            catch (Exception e)            {                                Log.WriteEntry("No se pudo buscar obtener el ekey del usuario: " + e, EventLogEntryType.Error);                throw new Exception("No se pudo buscar obtener el ekey del usuario: " + e.Message);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        /// <summary>        /// Retorna el ekey asociado al usuario, se buscara solo los registros activos        /// </summary>        /// <param name="cedula">Cedula del usuario </param>        /// <returns></returns>        public static string ObtenerEkeyPorId(Guid id)        {            EKey result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from ekey in context.EKey                                  where ekey.Id == id                                  select ekey).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                                Log.WriteEntry("No se pudo buscar el Ekey por Id: " + e, EventLogEntryType.Error);                throw new Exception("No se pudo buscar el Ekey por Id: " + e.Message);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        /// <summary>        /// Retorna todos los ekey almacenados        /// </summary>        /// <returns>List<EKey></returns>        public static string ObtenerEKey()        {            List<EKey> result = null;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from ekey in context.EKey                                  select ekey).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                Log.WriteEntry("No se pudo obtener los EKeys: " + e, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los EKeys: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        /// <summary>        /// Retorna los ekey dado el estado        /// </summary>        /// <param name="estado">Estado de los EKey</param>        /// <returns></returns>        public static string ObtenerEKeyPorEstado(bool estado)        {            List<EKey> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from ekey in context.EKey                                  where ekey.Estado == estado                                  select ekey).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                Log.WriteEntry("No se pudo obtener los EKey por estado: " + e, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los EKey por estado: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }    }}
