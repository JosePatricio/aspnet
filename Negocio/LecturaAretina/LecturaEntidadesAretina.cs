using Negocio.Sigeor.Configuracion;using Negocio.Utilidades;using PersistenciaAretina;using PersistenciaSigeor;using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Text;using System.Transactions;namespace Negocio.LecturaAretina{    public class LecturaEntidadesAretina    {                private static PoliticasCorporativas politicaResticcionBusquedaFecha = PoliticasCorporativasNegocio.ObtenerPoliticaPorCodigoDesSerializada(ConstantesNegocioUtil.COD_FEC_RESTRICION_BUSQUEDA);        #region LECTURA DE EIRS-ARETINA        public static C_EIR ObtenerEirPorId(string idEir, string codigoDeposito)        {            C_EIR result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from eir in context.C_EIR                                  where eir.ID_EIR == idEir && eir.COD_DEPOSITO == codigoDeposito                                  select eir).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el Eir del Sistema Sigeor Eir: " + idEir + " Deposito: " + codigoDeposito + "  " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<C_EIR> ObtenerEirs()        {            List<C_EIR> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from eir in context.C_EIR                                  select eir).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los Eirs del Sistema Sigeor: " + ex, EventLogEntryType.Error);            }            return result;        }        #endregion        #region LECTURA DE PTIS-ARETINA        public static C_PTI ObtenerPtiPorId(string idEir, string codigoDeposito)        {            C_PTI result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from pti in context.C_PTI                                  where pti.ID_EIR == idEir && pti.COD_DEPOSITO == codigoDeposito                                  select pti).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el Pti del Sistema Trinity Eir: " + idEir + " Deposito: " + codigoDeposito + "  " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<C_PTI> ObtenerPtis()        {            List<C_PTI> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from pti in context.C_PTI                                  select pti).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los Ptis del Sistema Trinity: " + ex, EventLogEntryType.Error);            }            return result;        }        #endregion        #region LECTURA DE DEPOSITOS-ARETINA        public static M_DEPOSITO ObtenerDepositoPorId(string codDeposito)        {            M_DEPOSITO result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from dep in context.M_DEPOSITO                                  where dep.COD_DEPOSITO == codDeposito                                  select dep).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el Deposito del Sistema Trinity por Id: " + codDeposito + "   " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<M_DEPOSITO> ObtenerDepositos()        {            List<M_DEPOSITO> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from dep in context.M_DEPOSITO                                  select dep).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los Depositos del Sistema Trinity: " + ex, EventLogEntryType.Error);            }            return result;        }        #endregion        #region LECTURA DE DEPOSITOS-ARETINA        public static M_LINEA ObtenerLineaPorId(string codLinea)        {            M_LINEA result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from lin in context.M_LINEA                                  where lin.COD_LINEA == codLinea                                  select lin).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la Linea del Sistema Trinity por Id: " + codLinea + "   " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<M_LINEA> ObtenerLineas()        {            List<M_LINEA> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from lin in context.M_LINEA                                  select lin).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las Lineas del Sistema Trinity: " + ex, EventLogEntryType.Error);            }            return result;        }        #endregion        #region LECTURA DE TIPO DE COTAINERS-ARETINA        public static M_TIPCONTAINER ObtenerTipoContainerPorId(string codTipocontainer)        {            M_TIPCONTAINER result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from tipo in context.M_TIPCONTAINER                                  where tipo.COD_TIPCONT == codTipocontainer                                  select tipo).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el Tipo de Container del Sistema Trinity por Id: " + codTipocontainer + "   " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<M_TIPCONTAINER> ObtenerTipoContainers()        {            List<M_TIPCONTAINER> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from tipo in context.M_TIPCONTAINER                                  select tipo).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los Tipos de Contenedores del Sistema Trinity: " + ex, EventLogEntryType.Error);            }            return result;        }        #endregion        #region LECTURA DE CABECERAS EGRESOS        public static Inv_H_CEgrProducto ObtenerCabeceraEgresoPorEor(string numEor)        {            Inv_H_CEgrProducto result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from tipo in context.Inv_H_CEgrProducto                                  where tipo.Num_Eor == numEor                                  select tipo).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la Cebecera del Egreso del Sistema Trinity por Eor: " + numEor + "   " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<Inv_H_CEgrProducto> ObtenerCabeceraEgresos()        {            List<Inv_H_CEgrProducto> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from tipo in context.Inv_H_CEgrProducto                                  where tipo.Num_Eor != null                                  select tipo).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las Cabeceras de los Egresos del Sistema Trinity: " + ex, EventLogEntryType.Error);            }            return result;        }        #endregion        #region LECTURA DE TIPO DE DETALLE EGRESOS        public static List<Inv_H_DEgrProducto> ObtenerDetallesEgresoPorEor(string numEor)        {            List<Inv_H_DEgrProducto> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from cab in context.Inv_H_CEgrProducto                                  join det in context.Inv_H_DEgrProducto on cab.Id_EgrProducto equals det.Id_EgrProducto                                  where cab.Num_Eor == numEor                                  select det).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el Detalle del Egreso del Sistema Trinity por Eor: " + numEor + "   " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<Inv_H_DEgrProducto> ObtenerDetalleEgresos()        {            List<Inv_H_DEgrProducto> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from cab in context.Inv_H_CEgrProducto                                  join det in context.Inv_H_DEgrProducto on cab.Id_EgrProducto equals det.Id_EgrProducto                                  select det).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el Detalle de los Egresos del Sistema Trinity: " + ex, EventLogEntryType.Error);            }            return result;        }        #endregion        #region LECTURA DE PRODUCTOS DETALLADOS EN EGRESOS        public static List<Inv_M_Producto> ObtenerProductosEgresoPorEor(string numEor)        {            List<Inv_M_Producto> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from cab in context.Inv_H_CEgrProducto                                  join det in context.Inv_H_DEgrProducto on cab.Id_EgrProducto equals det.Id_EgrProducto                                  join prod in context.Inv_M_Producto on det.id_producto equals prod.id_Producto                                  where cab.Num_Eor == numEor                                  select prod).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los productos del Detalle del Egreso del Sistema Trinity por Eor: " + numEor + "   " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<Inv_M_Producto> ObtenerProductosEgresos()        {            List<Inv_M_Producto> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from cab in context.Inv_H_CEgrProducto                                  join det in context.Inv_H_DEgrProducto on cab.Id_EgrProducto equals det.Id_EgrProducto                                  join prod in context.Inv_M_Producto on det.id_producto equals prod.id_Producto                                  select prod).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el Detalle de los Egresos del Sistema Trinity: " + ex, EventLogEntryType.Error);            }            return result;        }        #endregion    }}