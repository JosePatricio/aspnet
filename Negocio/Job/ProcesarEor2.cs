using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Text;using System.Transactions;using Negocio.Aretina;using Negocio.LecturaAretina;using Negocio.LecturaSap;using Negocio.Reportes;using Negocio.Sigeor.Configuracion;using Negocio.Sigeor.GestionControl;using Negocio.Utilidades;using PersistenciaSigeor;using Quartz;namespace Negocio.Job{    public class ProcesarEor2 : IProcesarEor    {        private static PoliticasCorporativas _politicaDiferenciaEstructura;        private static PoliticasCorporativas _politicaDiferenciaMaquinaria;        public void CargarPoliticasCorporativas()        {            try            {                var parametros = new ClaseBasica { IdString = "DIF_EST" };                var result = PoliticasCorporativasNegocio.ObtenerPoliticaPorCodigo(Serializador.SerializeEntity(parametros));                if (!string.IsNullOrEmpty(result))                    _politicaDiferenciaEstructura = Serializador.DeSerializeEntity<PoliticasCorporativas>(result);                parametros = new ClaseBasica { IdString = "DIF_MAQ" };                result = PoliticasCorporativasNegocio.ObtenerPoliticaPorCodigo(Serializador.SerializeEntity(parametros));                if (!string.IsNullOrEmpty(result))                    _politicaDiferenciaMaquinaria = Serializador.DeSerializeEntity<PoliticasCorporativas>(result);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar las politicas corporativas para el proceso de estimacion: " + ex, EventLogEntryType.Error);            }        }        public void Execute(IJobExecutionContext context)        {            try            {                ProcesarEors();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener ejecutar los procesos de los EORs correctamente " + ex, EventLogEntryType.Error);            }        }        public void ProcesarEors()        {            Log.WriteEntry("--------- INICIA PROCESO ---------", EventLogEntryType.Information);            CargarPoliticasCorporativas();            //Log.WriteEntry("Inicio Verificacion si se deben eliminar registros de Estructura...", EventLogEntryType.Information);            //ReporteEorEstructuraNegocio.VerificarEliminarReparaciones();            //Log.WriteEntry("Fin Verificacion si se deben eliminar registros de Estructura...", EventLogEntryType.Information);            Log.WriteEntry("Inicio Proceso Estructura...", EventLogEntryType.Information);            ProcesarEorsEstructura();            Log.WriteEntry("Finaliza Proceso Estructura...", EventLogEntryType.Information);            //Log.WriteEntry("Inicio Verificacion si se deben eliminar registros de Maquinaria...", EventLogEntryType.Information);            //ReporteEorMaquinariaNegocio.VerificarEliminarReparaciones();            //Log.WriteEntry("Fin Verificacion si se deben eliminar registros de Maquinaria...", EventLogEntryType.Information);            Log.WriteEntry("Inicio Proceso Maquinaria...", EventLogEntryType.Information);            ProcesarEorsMaquinaria();            Log.WriteEntry("Finaliza Proceso Maquinaria...", EventLogEntryType.Information);            Log.WriteEntry("Inicio Verificacion si se deben eliminar registros de Transito...", EventLogEntryType.Information);            ReporteEorTransitoNegocio.VerificarEliminarReparaciones();            Log.WriteEntry("Fin Verificacion si se deben eliminar registros de Transito...", EventLogEntryType.Information);            Log.WriteEntry("Inicio Proceso Transito...", EventLogEntryType.Information);            ProcesarEorsTransito();            Log.WriteEntry("Finaliza Proceso Transito...", EventLogEntryType.Information);            Log.WriteEntry("--------- FINALIZA PROCESO ---------", EventLogEntryType.Information);        }        #region INICIO PROCESAR EOR POR ESTRUCTURA        public static List<SC_EORESTRUCTURA> ObtenerEorNoProcesados()        {            List<SC_EORESTRUCTURA> lista = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        lista = (from eor in context.SC_EORESTRUCTURA                                 where eor.ESTADO == "R" && eor.FECHA_FINREPARA != null && eor.ESTADO_PROCESO <= 2                                 //NUM_EOREST == "ARE90575"                                 select eor).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EORs por Estructura no procesados: " + ex, EventLogEntryType.Error);            }            return lista;        }        public static decimal ObtenerTotalManoObraEstimadaEorEstructura(string numEor)        {            decimal? result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (context.SC_EORESTRUCTURA.Join(                            context.SD_EORESTRUCTURA,                            cab => new { cab.NUM_EOREST },                            det => new { det.NUM_EOREST },                            (cab, det) => new { cab, det })                            .Where(ent => ent.cab.NUM_EOREST == numEor)                            .Select(ent => ent.det.HORAS * ent.det.COSTOMAOBRA).Sum());                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma de la mano de obra del EOR por Estructura: " + ex, EventLogEntryType.Error);            }            return result ?? 0;        }        public static void ProcesarEorsEstructura()        {            try            {                List<PersistenciaAretina.C_EORESTRUCTURA> listaEorAretina = null;// LecturaAretinaNegocio.ObtenerCabecerasEstructuraReparadas(null);                List<SC_EORESTRUCTURA> listaEorsNoProcesados = ObtenerEorNoProcesados();                                int i = 0;                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                foreach (var itemEor in listaEorsNoProcesados)                {                    i++;                    Log.WriteEntry(i + " => NumEor: " + itemEor.NUM_EOREST, EventLogEntryType.Information);                    var resultEgresoTrinity = EgresosNegocio.ObtenerEgresosEorSigeor(itemEor.NUM_EOREST);                    var listaEgresosAgrupados = resultEgresoTrinity.Select(ent => ent.IdEgrProducto).Distinct().ToList();                    var sumaManoObraEstimada = ObtenerTotalManoObraEstimadaEorEstructura(itemEor.NUM_EOREST);                    //var eor = EorEstructuraNegocio.ObtenerEorCabeceraSigeorPorId(itemEor.NUM_EOREST);                    var eor = new SC_EORESTRUCTURA();                    if (eor != null)                    {                        decimal? sumaEgresosPorEor = null;                       // eor.TOTAL_COSTOHH = sumaManoObraEstimada;                        foreach (var itemEgresoTrinity in listaEgresosAgrupados)                        {                            var valorSumaMaterialSap = LecturaSapNegocio.ObtenerSumaEgresosEorSap(itemEgresoTrinity);                            if (eor.ESTADO_PROCESO < 3)                            {                                if (valorSumaMaterialSap != null)                                {                                    sumaEgresosPorEor = (sumaEgresosPorEor ?? 0) + valorSumaMaterialSap;                                }                            }                            else                            {                                if (valorSumaMaterialSap == null )                                    eor.TOTAL_REALMAT = 0;                            }                            var resultSap = LecturaSapNegocio.ObtenerDetalleEgresosEorSap(itemEgresoTrinity).ToList();                            foreach (var itemSap in resultSap)                            {                                var detalleEgresoResult = resultEgresoTrinity.FirstOrDefault(det => det.IdEgrProducto == itemSap.Ref2 &&                                                                                                     det.NroParte == itemSap.Sww);                                if (detalleEgresoResult != null)                                {                                    using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                                    {                                        using (var context = new SigeorEntities())                                        {                                            var detalleEgreso = (from det in context.SInv_H_DEgrProducto                                                                 where det.Id_EgrProducto == itemSap.Ref2 && det.id_producto == itemSap.Sww                                                                 select det).FirstOrDefault();                                            if (detalleEgreso != null)                                            {                                                detalleEgreso.CantidadReal = (int?)itemSap.Quantity;                                                detalleEgreso.CostoReal = (decimal?)itemSap.Price;                                                context.SInv_H_DEgrProducto.ApplyCurrentValues(detalleEgreso);                                                context.SaveChanges();                                            }                                        }                                        transactionScope.Complete();                                    }                                }                            }                        }                        eor.ESTADO_PROCESO += 1;                        eor.TOTAL_REALMAT = sumaEgresosPorEor;                        //if (eor.ESTADO_PROCESO == 3)                        //    eor.TOTAL_REAL = (eor.TOTAL_REALMAT ?? 0) + (eor.TOTAL_COSTOHH ?? 0);                        using (var context = new SigeorEntities())                        {                            //eor.TOTAL_COSTOHH = sumaManoObraEstimada;                            context.SC_EORESTRUCTURA.Attach(eor);                            context.ObjectStateManager.ChangeObjectState(eor, System.Data.EntityState.Modified);                            context.SC_EORESTRUCTURA.ApplyCurrentValues(eor);                            context.SaveChanges();                        }                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo procesar el EOR por Estructura: " + ex, EventLogEntryType.Error);            }        }        #endregion FIN PROCESAR EOR POR ESTRUCTURA        #region INICIO PROCESAR EOR POR MAQUINARIA        public static List<SC_EORMAQUINARIA> ObtenerEorMaquinariaNoProcesados()        {            List<SC_EORMAQUINARIA> lista = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        lista = (from eor in context.SC_EORMAQUINARIA                                 where eor.ESTADO == "R" && eor.FECHA_FINREPARA != null /*eor.TOTAL_REAL == null*/ && eor.ESTADO_PROCESO <= 2                                 select eor).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EORs por Maquinaria no procesados: " + ex, EventLogEntryType.Error);            }            return lista;        }        public static decimal ObtenerTotalManoObraEstimadaEorMaquinaria(string numEor)        {            decimal? result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (context.SC_EORMAQUINARIA.Join(                            context.SD_EORMAQUINARIA,                            cab => new { cab.NUM_EORMAQ },                            det => new { det.NUM_EORMAQ },                            (cab, det) => new { cab, det })                            .Where(ent => ent.cab.NUM_EORMAQ == numEor)                            .Select(ent => ent.det.HORAS * ent.det.COSTOMAOBRA).Sum());                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma de la mano de obra del EOR por Maquinaria: " + ex, EventLogEntryType.Error);            }            return result ?? 0;        }        public static void ProcesarEorsMaquinaria()        {            try            {                List<SC_EORMAQUINARIA> listaEorsNoProcesados = ObtenerEorMaquinariaNoProcesados();                int i = 0;                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                foreach (var itemEor in listaEorsNoProcesados)                {                    i++;                   // Log.WriteEntry(i + " => NumEor: " + itemEor.NUM_EORMAQ, EventLogEntryType.Information);                    var resultEgresoTrinity = EgresosNegocio.ObtenerEgresosEorSigeor(itemEor.NUM_EORMAQ);                    var listaEgresosAgrupados = resultEgresoTrinity.Select(ent => ent.IdEgrProducto).Distinct().ToList();                    var sumaManoObraEstimada = ObtenerTotalManoObraEstimadaEorMaquinaria(itemEor.NUM_EORMAQ);                    SC_EORMAQUINARIA eor = null;                    using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                    {                        using (var context = new SigeorEntities())                        {                            eor = (from cabEor in context.SC_EORMAQUINARIA                                   where cabEor.NUM_EORMAQ == itemEor.NUM_EORMAQ && cabEor.ID_EIR == itemEor.ID_EIR                                   select cabEor).FirstOrDefault();                        }                        transactionScope.Complete();                    }                    if (eor != null)                    {                        decimal? sumaEgresosPorEor = null;                        eor.TOTAL_COSTOHH = sumaManoObraEstimada;                        foreach (var itemEgresoTrinity in listaEgresosAgrupados)                        {                            var valorSumaMaterialSap = LecturaSapNegocio.ObtenerSumaEgresosEorSap(itemEgresoTrinity);                            if (eor.ESTADO_PROCESO < 3)                            {                                if (valorSumaMaterialSap != null)                                {                                    sumaEgresosPorEor = (sumaEgresosPorEor ?? 0) + valorSumaMaterialSap;                                }                            }                            else                            {                                if (valorSumaMaterialSap == null && eor.TOTAL_REAL == null)                                    eor.TOTAL_REALMAT = 0;                            }                            var resultSap = LecturaSapNegocio.ObtenerDetalleEgresosEorSap(itemEgresoTrinity).ToList();                            foreach (var itemSap in resultSap)                            {                                var detalleEgresoResult = resultEgresoTrinity.FirstOrDefault(det => det.IdEgrProducto == itemSap.Ref2 &&                                                                                                     det.NroParte == itemSap.Sww);                                if (detalleEgresoResult != null)                                {                                    using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                                    {                                        using (var context = new SigeorEntities())                                        {                                            var detalleEgreso = (from det in context.SInv_H_DEgrProducto                                                                 where det.Id_EgrProducto == itemSap.Ref2 && det.id_producto == itemSap.Sww                                                                 select det).FirstOrDefault();                                            if (detalleEgreso != null)                                            {                                                detalleEgreso.CantidadReal = (int?)itemSap.Quantity;                                                detalleEgreso.CostoReal = (decimal?)itemSap.Price;                                                context.SInv_H_DEgrProducto.ApplyCurrentValues(detalleEgreso);                                                context.SaveChanges();                                            }                                        }                                        transactionScope.Complete();                                    }                                }                            }                        }                        eor.ESTADO_PROCESO += 1;                        eor.TOTAL_REALMAT = sumaEgresosPorEor;                        //if (eor.ESTADO_PROCESO == 3)                        eor.TOTAL_REAL = (eor.TOTAL_REALMAT ?? 0) + (eor.TOTAL_COSTOHH ?? 0);                        //if (_politicaDiferenciaMaquinaria != null)                        //{                        //}                        var eir = ObtenerEirPorCodigo(eor.ID_EIR);                        decimal valorHHNegociacionProveedor = new decimal(0), valorHHNegociacionLinea = new decimal(0);                        if (eir != null)                        {                            var parametros = new ClaseBasica                            {                                IdStringUno = eir.COD_LINEA,                                IdStringDos = eor.COD_INSPECTOR1,                                IdStringTres = eor.COD_DEPOSITO,                                FechaDateTimeUno = eor.FECHA_FINREPARA.Value                            };                            var negociacionProveedor = NegociacionProveedorHistoricoNegocio.ObtenerNegociacionProveedorPorFecha(parametros);                            var negociacionLinea = NegociacionLineaHistoricoNegocio.ObtenerNegociacionLineaPorFecha(parametros);                            if (negociacionProveedor != null)                            {                                if (negociacionProveedor.EsPorcNegoHHMaq)                                {                                    var porcentaje = (negociacionProveedor.ValorNegoHHMaq * eor.TOTAL_COSTOHH.Value);                                    valorHHNegociacionLinea = porcentaje != 0 ? (porcentaje / 100) : 0;                                    //eor.TOTAL_REAL += valorHHNegociacionLinea;                                }                                else                                    valorHHNegociacionProveedor = ObtenerSumaHHMaqConPoliticaDif(eor, negociacionProveedor);                            }                            if (negociacionLinea != null)                            {                                if (negociacionLinea.EsPorcNegoHHMaq)                                {                                    var porcentaje = (negociacionLinea.ValorNegoHHMaq * eor.TOTAL_REAL.Value);                                    valorHHNegociacionLinea = porcentaje != 0 ? (porcentaje / 100) : 0;                                    // eor.TOTAL_REAL += valorHHNegociacionLinea;                                }                                else                                    valorHHNegociacionLinea = negociacionLinea.ValorNegoHHMaq;                            }                            Log.WriteEntry(                                "  COUNT : " + i +                                "  EORMAQ: " + eor.NUM_EORMAQ +                                "  T.MAQ : " + eor.TOTALMAQ +                                "  T.REAL: " + eor.TOTAL_REAL +                                "  HH_EOR: " + eor.TOTAL_COSTOHH +                                "  N_PROV_M_HH: " + valorHHNegociacionProveedor +                                "  N_LINE_M_HH: " + valorHHNegociacionLinea +                                "  N_PROV_IS_%: " + (negociacionProveedor?.EsPorcNegoHHMaq.ToString() ?? "null") +                                "  N_LINE_IS_%: " + (negociacionLinea?.EsPorcNegoHHMaq.ToString()?? "null") +                                "  VAL_DIF_MAQ: " + _politicaDiferenciaMaquinaria.NumericValueUno+                                "  V_PTI_CORTO: " + negociacionLinea?.PtiCorto ?? "null",                                EventLogEntryType.Information);                        }                        using (var context = new SigeorEntities())                        {                            eor.TOTAL_COSTOHH = sumaManoObraEstimada;                            context.SC_EORMAQUINARIA.Attach(eor);                            context.ObjectStateManager.ChangeObjectState(eor, System.Data.EntityState.Modified);                            context.SC_EORMAQUINARIA.ApplyCurrentValues(eor);                            context.SaveChanges();                        }                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo procesar el EOR por Maquinaria: " + ex, EventLogEntryType.Error);            }        }        #endregion FIN PROCESAR EOR POR MAQUINARIA        #region INICIO PROCESAR EOR POR TRANSITO        public static List<SC_EORTRANSITO> ObtenerEorTransitoNoProcesados()        {            List<SC_EORTRANSITO> lista = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        lista = (from eor in context.SC_EORTRANSITO                                 where ((eor.ESTADOEST == 8 && eor.ESTADOMAQ == null) ||                                        (eor.ESTADOMAQ == 8 && eor.ESTADOEST == null) ||                                        (eor.ESTADOMAQ == 8 && eor.ESTADOEST == 8)                                       ) &&                                       eor.ESTADO_PROCESO <= 2                                 select eor).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EORs por Maquinaria no procesados: " + ex, EventLogEntryType.Error);            }            return lista;        }        public static decimal ObtenerTotalManoObraEstimadaEorTransito(string numEor)        {            decimal? result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (context.SC_EORTRANSITO.Join(                            context.SD_EORTRANSITO,                            cab => new { cab.NUM_EORTRANSITO },                            det => new { det.NUM_EORTRANSITO },                            (cab, det) => new { cab, det })                            .Where(ent => ent.cab.NUM_EORTRANSITO == numEor)                            .Select(ent => ent.det.HORAS * ent.det.COSTOMAOBRA).Sum());                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma de la mano de obra del EOR por Maquinaria: " + ex, EventLogEntryType.Error);            }            return result ?? 0;        }        public static void ProcesarEorsTransito()        {            try            {                List<SC_EORTRANSITO> listaEorsNoProcesados = ObtenerEorTransitoNoProcesados();                long i = 0;                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                foreach (var itemEor in listaEorsNoProcesados)                {                    i++;                    Log.WriteEntry(i + " => NumEor: " + itemEor.NUM_EORTRANSITO, EventLogEntryType.Information);                    var resultEgresoTrinity = EgresosNegocio.ObtenerEgresosEorSigeor(itemEor.NUM_EORTRANSITO);                    var listaEgresosAgrupados = resultEgresoTrinity.Select(ent => ent.IdEgrProducto).Distinct().ToList();                    var sumaManoObraEstimada = ObtenerTotalManoObraEstimadaEorTransito(itemEor.NUM_EORTRANSITO);                    SC_EORTRANSITO eor = null;                    using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                    {                        using (var context = new SigeorEntities())                        {                            eor = (from cabEor in context.SC_EORTRANSITO                                   where cabEor.NUM_EORTRANSITO == itemEor.NUM_EORTRANSITO ///&& cabEor.ID_EIR == itemEor.ID_EIR                                   select cabEor).FirstOrDefault();                        }                        transactionScope.Complete();                    }                    if (eor != null)                    {                        decimal? sumaEgresosPorEor = null;                        eor.TOTAL_COSTOHH = sumaManoObraEstimada;                        foreach (var itemEgresoTrinity in listaEgresosAgrupados)                        {                            var valorSumaMaterialSap = LecturaSapNegocio.ObtenerSumaEgresosEorSap(itemEgresoTrinity);                            if (eor.ESTADO_PROCESO < 3)                            {                                if (valorSumaMaterialSap != null)                                {                                    sumaEgresosPorEor = (sumaEgresosPorEor ?? 0) + valorSumaMaterialSap;                                }                            }                            else                            {                                if (valorSumaMaterialSap == null && eor.TOTAL_REAL == null)                                    eor.TOTAL_REALMAT = 0;                            }                            var resultSap = LecturaSapNegocio.ObtenerDetalleEgresosEorSap(itemEgresoTrinity).ToList();                            foreach (var itemSap in resultSap)                            {                                var detalleEgresoResult = resultEgresoTrinity.FirstOrDefault(det => det.IdEgrProducto == itemSap.Ref2 &&                                                                                                     det.NroParte == itemSap.Sww);                                if (detalleEgresoResult != null)                                {                                    using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                                    {                                        using (var context = new SigeorEntities())                                        {                                            var detalleEgreso = (from det in context.SInv_H_DEgrProducto                                                                 where det.Id_EgrProducto == itemSap.Ref2 && det.id_producto == itemSap.Sww                                                                 select det).FirstOrDefault();                                            if (detalleEgreso != null)                                            {                                                detalleEgreso.CantidadReal = (int?)itemSap.Quantity;                                                detalleEgreso.CostoReal = (decimal?)itemSap.Price;                                                context.SInv_H_DEgrProducto.ApplyCurrentValues(detalleEgreso);                                                context.SaveChanges();                                            }                                        }                                        transactionScope.Complete();                                    }                                }                            }                        }                        eor.ESTADO_PROCESO += 1;                        eor.TOTAL_REALMAT = sumaEgresosPorEor;                        if (eor.ESTADO_PROCESO == 3)                            eor.TOTAL_REAL = (eor.TOTAL_REALMAT ?? 0) + (eor.TOTAL_COSTOHH ?? 0);                        using (var context = new SigeorEntities())                        {                            eor.TOTAL_COSTOHH = sumaManoObraEstimada;                            context.SC_EORTRANSITO.Attach(eor);                            context.ObjectStateManager.ChangeObjectState(eor, System.Data.EntityState.Modified);                            context.SC_EORTRANSITO.ApplyCurrentValues(eor);                            context.SaveChanges();                        }                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo procesar el EOR por Transito: " + ex, EventLogEntryType.Error);            }        }        #endregion FIN PROCESAR EOR POR TRANSITO        public static SC_EIR ObtenerEirPorCodigo(string idEir)        {            SC_EIR result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from eir in context.SC_EIR                                  where eir.ID_EIR == idEir                                  select eir).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el EIR con id: " + idEir + " " + ex, EventLogEntryType.Error);            }            return result;        }        public static decimal ObtenerSumaHHMaqConPoliticaDif(SC_EORMAQUINARIA eor, GET_NEGOCIACION_PROVEEDOR_X_FECHA_Result negociacionProveedor)        {            var suma = new decimal(0);            try            {                var diferenciaHH = new decimal(0);                if (negociacionProveedor.PtiRap != null && negociacionProveedor.PtiNormal == null)                    diferenciaHH = _politicaDiferenciaMaquinaria.NumericValueUno.Value - negociacionProveedor.PtiRap.Value;                if (negociacionProveedor.PtiRap == null && negociacionProveedor.PtiNormal != null)                    diferenciaHH = _politicaDiferenciaMaquinaria.NumericValueUno.Value - negociacionProveedor.PtiNormal.Value;                var calDiferenciaPoliticaHH = new decimal(0);                eor.DetalleEorMaquinaria.ForEach(ent =>                {                    suma += (ent.HORAS.Value * diferenciaHH);                });            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma de la mano HH Maq. con la neg. de proveedor - Eor: " + eor.NUM_EORMAQ + " " + ex, EventLogEntryType.Error);            }            return suma;        }    }}
