using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Text;using System.Transactions;using Negocio.Sigeor.Configuracion;using Negocio.Utilidades;using PersistenciaAretina;using PersistenciaSigeor;using Negocio.LecturaSap;using Negocio.LecturaAretina;using System.Data.Objects.SqlClient;using Negocio.Sigeor.GestionControl;using System.Globalization;using System.Threading;namespace Negocio.Job{    public class EorMaquinariaProcesoNegocio2    {        private static string CODIGO_POLITICA_FEC_REST = "FEC_RESTR";        public static SC_EORMAQUINARIA ObtenerEorCabeceraSigeorPorId(string numEor)        {            SC_EORMAQUINARIA result = null;            try            {                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from eor in context.SC_EORMAQUINARIA                                  where eor.NUM_EORMAQ == numEor &&                                        eor.ESTADO == "R" &&                                        eor.FECHA_FINREPARA != null                                  select eor).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener el EOR de Maquinaria del Sistema Sigeor por Id (ThreadAbortException): " + numEor + " " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el EOR de Maquinaria del Sistema Sigeor por Id: " + numEor + " " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<SC_EORMAQUINARIA> ObtenerEorsCabeceraSigeor()        {            var result = new List<SC_EORMAQUINARIA>();            try            {                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from eor in context.SC_EORMAQUINARIA
                                      //where eor.ESTADO == "R"                                                 
                                  select eor).ToList();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener los EOR's Maquinaria del Sitema SIGEOR (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EOR's Maquinaria del Sitema SIGEOR: " + ex, EventLogEntryType.Error);            }            return result;        }        public static void GuardarEorSigeor(SC_EORMAQUINARIA eor)        {            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var contextSigeor = new SigeorEntities())                    {                        eor.ESTADO_PROCESO = 0;                        contextSigeor.SC_EORMAQUINARIA.AddObject(eor);                        using (var contextAretina = new AretinaEntities())                        {                            var detalleEor = (from det in contextAretina.D_EORMAQUINARIA                                              where det.NUM_EORMAQ == eor.NUM_EORMAQ                                              select det).ToList();                            foreach (var detalleAretina in detalleEor)                            {                                var detalleSigeor = new SD_EORMAQUINARIA();                                var entity = Reflection.ClonarEntidad(detalleAretina, detalleSigeor);                                detalleSigeor = entity != null ? (SD_EORMAQUINARIA)entity : null;                                if (detalleSigeor != null)                                {                                    contextSigeor.SD_EORMAQUINARIA.AddObject(detalleSigeor);                                }                            }                        }                        contextSigeor.SaveChanges();                        transactionScope.Complete();                    }                }            }            catch (System.Data.UpdateException ex)            {                Log.WriteEntry("No se pudo guardar el EOR Maquinaria " + eor.NUM_EORMAQ + " el Sistema SIGEOR (UpdateException): " + ex, EventLogEntryType.Error);            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo guardar el EOR Maquinaria " + eor.NUM_EORMAQ + " el Sistema SIGEOR (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo guardar el EOR Maquinaria " + eor.NUM_EORMAQ + " el Sistema SIGEOR: " + ex, EventLogEntryType.Error);            }        }        public static void GuardarEorSigeor(IEnumerable<C_EORMAQUINARIA> listaEorsAretina)        {            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var contextSigeor = new SigeorEntities())                    {                        foreach (var eorAretina in listaEorsAretina)                        {                            var eorSigeor = new SC_EORMAQUINARIA();                            var entity = Reflection.ClonarEntidad(eorAretina, eorSigeor);                            eorSigeor = entity != null ? (SC_EORMAQUINARIA)entity : null;                            eorSigeor.ESTADO_PROCESO = 0;                            contextSigeor.SC_EORMAQUINARIA.AddObject(eorSigeor);                            using (var contextAretina = new AretinaEntities())                            {                                var detalleEor = (from det in contextAretina.D_EORMAQUINARIA                                                  where det.NUM_EORMAQ == eorSigeor.NUM_EORMAQ                                                  select det).ToList();                                foreach (var detalleAretina in detalleEor)                                {                                    var detalleSigeor = new SD_EORMAQUINARIA();                                    var entityDetalle = Reflection.ClonarEntidad(detalleAretina, detalleSigeor);                                    detalleSigeor = entity != null ? (SD_EORMAQUINARIA)entityDetalle : null;                                    if (detalleSigeor != null)                                    {                                        contextSigeor.SD_EORMAQUINARIA.AddObject(detalleSigeor);                                    }                                }                            }                        }                        contextSigeor.SaveChanges();                        transactionScope.Complete();                    }                }            }            catch (System.Data.UpdateException ex)            {                Log.WriteEntry("No se pudo guardar la lista de EORs Maquinaria el Sistema SIGEOR (UpdateException): " + ex, EventLogEntryType.Error);            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo guardar la lista de EORs Maquinaria el Sistema SIGEOR (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo guardar la lista de EORs Maquinaria el Sistema SIGEOR: " + ex, EventLogEntryType.Error);            }        }        public static C_EORMAQUINARIA ObtenerEorCabeceraAretinaPorId(string numEor)        {            C_EORMAQUINARIA result = null;            try            {                var politicaDiferenciaValor = PoliticasCorporativasNegocio.ObtenerPoliticaPorCodigoDesSerializada(CODIGO_POLITICA_FEC_REST);                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from eor in context.C_EORMAQUINARIA                                  where eor.NUM_EORMAQ == numEor &&
//eor.ESTADO == "R" &&
                                                                                                        eor.FECHA_FINREPARA >= politicaDiferenciaValor.FechaValueUno                                  select eor).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener el EOR Cabecera del Sistema Aretina por Id (ThreadAbortException): " + numEor + " " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el EOR Cabecera del Sistema Aretina por Id: " + numEor + " " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<C_EORMAQUINARIA> ObtenerEorsCabeceraAretina()        {            var result = new List<C_EORMAQUINARIA>();            try            {                var politicaDiferenciaValor = PoliticasCorporativasNegocio.ObtenerPoliticaPorCodigoDesSerializada(CODIGO_POLITICA_FEC_REST);                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {
                        //result = (from eor in context.C_EORMAQUINARIA
                        //          where eor.ESTADO == "R" &&
                        //          eor.FECHA_FINREPARA != null
                        //          select eor)
                        //          .Where(ent => ent.FECHA_FINREPARA.Value >= politicaDiferenciaValor.FechaValueUno.Value).ToList();
                        result = (from eor in context.C_EORMAQUINARIA                                  where                                  eor.FECHA_CREACION.Value >= politicaDiferenciaValor.FechaValueUno.Value                                  select eor).ToList();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener los EOR's Estructura del Sitema Aretina (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EOR's Estructura del Sitema Aretina: " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<SC_EORMAQUINARIA> DiscriminarEorsMaquinariaAretinaSigeor()        {            IEnumerable<C_EORMAQUINARIA> result = new List<C_EORMAQUINARIA>(); ;            var listaSigeor = new List<SC_EORMAQUINARIA>();            try            {                var listaEorSigeor = ObtenerEorsCabeceraSigeor();                var listaEorAretina = ObtenerEorsCabeceraAretina();                result = from eorAretina in listaEorAretina                         join eorSigeor in listaEorSigeor on eorAretina.NUM_EORMAQ equals eorSigeor.NUM_EORMAQ                         into temporal                         from left in temporal.DefaultIfEmpty()                         where left == null                         select eorAretina;                GuardarEorSigeor(result);

                //foreach (var eorSigeor in from eorAretina in result
                //                          let eorSigeor = new SC_EORESTRUCTURA()
                //                          let entidad = Reflection.ClonarEntidad(eorAretina, eorSigeor)
                //                          select entidad != null ? (SC_EORESTRUCTURA)entidad : null)
                //{
                //    GuardarEorSigeor(eorSigeor);
                //}

                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {
                        //listaSigeor = (from eor in context.SC_EORESTRUCTURA
                        //               where eor.ESTADO_PROCESO <= 2
                        //               select eor).ToList();
                        listaSigeor = (from eor in context.SC_EORMAQUINARIA                                       where eor.ESTADO == "R" && eor.FECHA_FINREPARA != null && eor.ESTADO_PROCESO <= 2                                       select eor).ToList();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo Discriminar los EOR's de Estructura del Sistema SIGEOR vs. Sistema Aretina (Listas/ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo Discriminar los EOR's de Estructura del Sistema SIGEOR vs. Sistema Aretina (Listas): " + ex, EventLogEntryType.Error);            }            return listaSigeor;        }        public static List<C_EORMAQUINARIA> DiscriminarEorMaquinaria(string numEor)        {            IEnumerable<C_EORMAQUINARIA> result = new List<C_EORMAQUINARIA>(); ;            try            {                var politicaDiferenciaValor = PoliticasCorporativasNegocio.ObtenerPoliticaPorCodigoDesSerializada(CODIGO_POLITICA_FEC_REST);                List<SC_EORMAQUINARIA> listaSigeor;                List<C_EORMAQUINARIA> listaAretina;                using (var context = new SigeorEntities())                {                    if (!string.IsNullOrEmpty(numEor))                    {                        listaSigeor = (from eorSigeor in context.SC_EORMAQUINARIA                                       where eorSigeor.NUM_EORMAQ == numEor                                       select eorSigeor).ToList();                    }                    else                        listaSigeor = context.SC_EORMAQUINARIA.ToList();                }                using (var contextAretina = new AretinaEntities())                {                    if (!string.IsNullOrEmpty(numEor) && !listaSigeor.Any())                    {
                        //listaAretina = (from eorAretina in contextAretina.C_EORMAQUINARIA
                        //                where eorAretina.ESTADO == "R" &&
                        //                eorAretina.FECHA_FINREPARA != null &&
                        //                eorAretina.NUM_EORMAQ == numEor &&
                        //                eorAretina.FECHA_FINREPARA >= politicaDiferenciaValor.FechaValueUno
                        //                select eorAretina).ToList();
                        listaAretina = (from eorAretina in contextAretina.C_EORMAQUINARIA                                        where                                        eorAretina.NUM_EORMAQ == numEor &&                                        eorAretina.FECHA_CREACION >= politicaDiferenciaValor.FechaValueUno                                        select eorAretina).ToList();                    }                    else
                        //listaAretina = (from eorAretina in contextAretina.C_EORMAQUINARIA
                        //                where eorAretina.ESTADO == "R" &&
                        //                eorAretina.FECHA_FINREPARA != null &&
                        //                 eorAretina.FECHA_FINREPARA >= politicaDiferenciaValor.FechaValueUno
                        //                select eorAretina).ToList();
                        listaAretina = (from eorAretina in contextAretina.C_EORMAQUINARIA                                        where                                         eorAretina.FECHA_CREACION >= politicaDiferenciaValor.FechaValueUno                                        select eorAretina).ToList();                }                result = from eorAretina in listaAretina                         join eorSigeor in listaSigeor on eorAretina.NUM_EORMAQ equals eorSigeor.NUM_EORMAQ                         into temporal                         from left in temporal.DefaultIfEmpty()                         where left == null                         select eorAretina;            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo Discriminar los EOR's del Sistema SIGEOR vs. Sistema Aretina (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo Discriminar los EOR's del Sistema SIGEOR vs. Sistema Aretina: " + ex, EventLogEntryType.Error);            }            return result.ToList();        }        public static decimal ObtenerTotalManoObraEorMaquinariaAretina(string numEor)        {            decimal? result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from cab in context.C_EORMAQUINARIA                                  join det in context.D_EORMAQUINARIA on cab.NUM_EORMAQ equals det.NUM_EORMAQ                                  where cab.NUM_EORMAQ == numEor                                  select det).Select(ent => ent.HORAS * ent.COSTOMAOBRA).Sum();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener la suma de la mano de obra estimada del EOR " + numEor + " por Maquinaria (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma de la mano de obra estimada del EOR " + numEor + " por Maquinaria: " + ex, EventLogEntryType.Error);            }            return result ?? 0;        }        public static decimal ObtenerTotalManoObraEorMaquinariaReal(string numEor)        {            var result = new decimal(0);            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    var contextAretina = new AretinaEntities();                    var contextSigeor = new SigeorEntities();                    var resultJoinCabeceraDetalle = (from cab in contextAretina.C_EORMAQUINARIA                                                     from det in                                                         contextAretina.D_EORMAQUINARIA.Where(                                                             det =>                                                                 cab.NUM_EORMAQ == det.NUM_EORMAQ && cab.ID_EIR == det.ID_EIR &&                                                                 cab.COD_DEPOSITO == det.COD_DEPOSITO)                                                     where cab.NUM_EORMAQ == numEor                                                     select new { cab, det }).ToList();                    if (resultJoinCabeceraDetalle.Any())                    {                        var cabeceraEor = resultJoinCabeceraDetalle.FirstOrDefault().cab;                        var detalleEor = resultJoinCabeceraDetalle.FirstOrDefault().det;                        if (cabeceraEor != null && detalleEor != null)                        {                            var negociacionProv =                                contextSigeor.GET_NEGOCIACION_PROVEEDOR_X_FECHA(detalleEor.COD_LINEA, cabeceraEor.COD_INSPECTOR1, cabeceraEor.COD_DEPOSITO, cabeceraEor.FECHA_FINREPARA).FirstOrDefault();                            if (negociacionProv != null)                            {                                var sum = resultJoinCabeceraDetalle.Select(eor => eor.det.HORAS * negociacionProv.ValorNegoHHMaq).Sum();                                result = sum ?? new decimal(0);                            }                        }                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("Se registro una excepcion al obtener la suma Real para el EOR " + numEor + " por Maquinaria (TransactionAbortedException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma Real de la mano de obra del EOR " + numEor + " por Maquinaria: " + ex, EventLogEntryType.Error);            }            return result;        }        public static GET_NEGOCIACION_LINEA_X_FECHA_Result ObtenerValorNegociacionLinea(string numEor)        {            var result = new GET_NEGOCIACION_LINEA_X_FECHA_Result();            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    var contextAretina = new AretinaEntities();                    var contextSigeor = new SigeorEntities();                    var resultJoinCabeceraDetalle = (from cab in contextAretina.C_EORMAQUINARIA                                                     from det in                                                         contextAretina.D_EORMAQUINARIA.Where(                                                             det =>                                                                 cab.NUM_EORMAQ == det.NUM_EORMAQ && cab.ID_EIR == det.ID_EIR &&                                                                 cab.COD_DEPOSITO == det.COD_DEPOSITO)                                                     where cab.NUM_EORMAQ == numEor                                                     select new { cab, det }).FirstOrDefault();                    if (resultJoinCabeceraDetalle != null)                    {                        var cabeceraEor = resultJoinCabeceraDetalle.cab;                        var detalleEor = resultJoinCabeceraDetalle.det;                        if (cabeceraEor != null && detalleEor != null)                            result =                               contextSigeor.GET_NEGOCIACION_LINEA_X_FECHA(detalleEor.COD_LINEA, cabeceraEor.COD_DEPOSITO, cabeceraEor.FECHA_FINREPARA).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener la suma Real de la neg. por linea del EOR " + numEor + " por Maquinaria (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma Real de la neg. por linea del EOR " + numEor + " por Maquinaria: " + ex, EventLogEntryType.Error);            }            return result;        }        public static void VerificarEorMaquinaria(string numEor)        {            try            {                if (!string.IsNullOrEmpty(numEor))                {                    var eorSigeor = ObtenerEorCabeceraSigeorPorId(numEor);                    if (eorSigeor == null) //No existe EOR en SIGEOR
                    {                        var eorAretina = ObtenerEorCabeceraAretinaPorId(numEor);                        if (eorAretina != null) // Existe EOR en Aretina
                        {                            eorSigeor = new SC_EORMAQUINARIA();                            var entity = Reflection.ClonarEntidad(eorAretina, eorSigeor);                            eorSigeor = entity != null ? (SC_EORMAQUINARIA)entity : null;                            if (eorSigeor != null)                            {                                GuardarEorSigeor(eorSigeor);                                var listaEorSigeor = new List<SC_EORMAQUINARIA> { eorSigeor };                                ProcesarEorMaquinaria(listaEorSigeor);                            }                        }                    }                }                else                {                    ProcesarEorMaquinaria(null);                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo verificar el EOR por Estructura (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo verificar el EOR por Estructura: " + ex, EventLogEntryType.Error);            }        }        public static void ProcesarEorMaquinaria(List<SC_EORMAQUINARIA> listaEorsNoProcesados)        {            try            {                int i = 0;                if (listaEorsNoProcesados == null)                    listaEorsNoProcesados = DiscriminarEorsMaquinariaAretinaSigeor();

                //var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };
                //using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))
                //{
                using (var context = new SigeorEntities())
                {
                    foreach (var eor in listaEorsNoProcesados)
                    {
                        i++;

                        Log.WriteEntry(i + " => NumEor: " + eor.NUM_EORMAQ, EventLogEntryType.Information);

                        var resultEgresoTrinity = EgresosNegocio.ObtenerEgresosEorSigeor(eor.NUM_EORMAQ);
                        var listaEgresosAgrupados = resultEgresoTrinity.Select(ent => ent.IdEgrProducto).Distinct().ToList();


                        var sumaManoObra = ObtenerTotalManoObraEorMaquinariaReal(eor.NUM_EORMAQ);

                        var sumaNegLinea = ObtenerValorNegociacionLinea(eor.NUM_EORMAQ);

                        sumaManoObra = sumaManoObra == 0
                            ? ObtenerTotalManoObraEorMaquinariaAretina(eor.NUM_EORMAQ)
                            : sumaManoObra;

                        if (eor != null)
                        {
                            decimal? sumaEgresosPorEor = 0;
                            eor.TOTAL_COSTOHH = sumaManoObra;

                            foreach (var itemEgresoTrinity in listaEgresosAgrupados)
                            {

                                var valorSumaMaterialSap = LecturaSapNegocio.ObtenerSumaEgresosEorSap(itemEgresoTrinity);

                                sumaEgresosPorEor += valorSumaMaterialSap;

                                #region SI COINCIDE UN PRODUCTO DE SAP CON EL EGRESO DE TRINITY, GUARDA LA CANTIDAD Y PRECIO
                                var resultSap = LecturaSapNegocio.ObtenerDetalleEgresosEorSap(itemEgresoTrinity).ToList();

                                foreach (var itemSap in resultSap)
                                {
                                    var detalleEgresoResult = resultEgresoTrinity.FirstOrDefault(det => det.IdEgrProducto == itemSap.Ref2 && det.NroParte == itemSap.Sww);
                                    if (detalleEgresoResult != null)
                                    {
                                        //using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))
                                        //{
                                        //    using (var context = new SigeorEntities())
                                        //    {
                                        var detalleEgreso = (from det in context.SInv_H_DEgrProducto
                                                             where det.Id_EgrProducto == itemSap.Ref2 && det.id_producto == itemSap.Sww
                                                             select det).FirstOrDefault();
                                        if (detalleEgreso != null)
                                        {
                                            detalleEgreso.CantidadReal = (int?)itemSap.Quantity;
                                            detalleEgreso.CostoReal = (decimal?)itemSap.Price;
                                            context.SInv_H_DEgrProducto.ApplyCurrentValues(detalleEgreso);
                                            context.SaveChanges();
                                        }
                                        //    }
                                        //    transactionScope.Complete();
                                        //}
                                    }
                                }


                                #endregion                                }
                            eor.ESTADO_PROCESO += 1;
                            eor.TOTAL_REALMAT = sumaEgresosPorEor;
                            eor.TOTAL_REAL = (eor.TOTAL_REALMAT ?? 0) + (eor.TOTAL_COSTOHH ?? 0);

                            eor.TOTAL_COSTOHH = sumaManoObra;
                            context.SC_EORMAQUINARIA.Attach(eor);
                            context.ObjectStateManager.ChangeObjectState(eor, System.Data.EntityState.Modified);
                            context.SC_EORMAQUINARIA.ApplyCurrentValues(eor);
                        }
                    }
                    context.SaveChanges();
                    //  transactionScope.Complete();
                }
            }
            //}
            catch (System.Data.UpdateException ex)            {                Log.WriteEntry("No se pudo procesar el EOR por Maquinaria (UpdateException): " + ex, EventLogEntryType.Error);            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo procesar el EOR por Maquinaria (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo procesar el EOR por Maquinaria: " + ex, EventLogEntryType.Error);            }        }        public static void VerificarEliminaciones()        {            try            {                var codigo = "COD_MAQ";                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var politica = (from pol in context.PoliticasCorporativas                                        where pol.Codigo == codigo && pol.Estado                                        select pol).FirstOrDefault();                        if (politica != null && politica.Estado)                        {                            var fechaInicio = politica.FechaValueUno.Value.ToString(CultureInfo.InvariantCulture);                            var fechaFin = politica.FechaValueDos.Value.ToString(CultureInfo.InvariantCulture);                            var countEliminados = context.ELMINACION_REPARACIONES(fechaInicio, fechaFin, codigo).FirstOrDefault();                            Log.WriteEntry("Se eliminaron <<" + countEliminados.ToString() + ">> registros de la tabla SC_EORMAQUINARIA" +                                            " desde la fecha " + fechaInicio + " a la fecha del Sistema SIGEOR" + fechaFin, EventLogEntryType.Information);                        }                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo eliminar automaticamente las reparaciones de SC_EORMAQUINARIA (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar automaticamente las reparaciones de SC_EORMAQUINARIA: " + ex, EventLogEntryType.Error);            }        }    }}
