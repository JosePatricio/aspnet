using System;using System.Collections.Generic;using System.Linq;using System.Text;using Negocio.Utilidades;using PersistenciaSigeor;using System.Data.EntityClient;using System.Data;using System.Data.SqlClient;using System.Data.Common;using System.Diagnostics;using System.Transactions;namespace Negocio.Configuracion{    public class EstructuraNegocio    {        private static SigeorEntities _context = new SigeorEntities();        public static void Insertar(string estructuraSerializada)        {            try            {                Estructura estructura = Serializador.DeSerializeEntity<Estructura>(estructuraSerializada);                _context = new SigeorEntities();                _context.Estructura.Attach(estructura);                _context.ObjectStateManager.ChangeObjectState(estructura, System.Data.EntityState.Added);                _context.SaveChanges();                AuditoriaNegocio.InsertarAuditoria(estructura, null, TipoAuditoriaEnum.INS);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo registrar la estructura: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo registrar la estructura: " + ex);            }        }        public static void Modificar(string estructuraSerializada)        {            try            {                Estructura estructura = Serializador.DeSerializeEntity<Estructura>(estructuraSerializada);                _context = new SigeorEntities();                var busquedaAnterior = (from danio in _context.Estructura                                        where danio.Id == estructura.Id                                        select danio).FirstOrDefault();                var anteriorClonado = Reflection.ClonarEntidadAuditoria(busquedaAnterior);                _context.Estructura.Attach(estructura);                _context.ObjectStateManager.ChangeObjectState(estructura, System.Data.EntityState.Modified);                _context.SaveChanges();                AuditoriaNegocio.InsertarAuditoria(estructura, anteriorClonado, TipoAuditoriaEnum.UPD);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar la estructura: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar la estructura: " + ex);            }        }        public static void Eliminar(string estructuraSerializada)        {            try            {                Estructura estructura = Serializador.DeSerializeEntity<Estructura>(estructuraSerializada);                _context = new SigeorEntities();                _context.Estructura.Attach(estructura);                _context.ObjectStateManager.ChangeObjectState(estructura, System.Data.EntityState.Deleted);                _context.SaveChanges();                AuditoriaNegocio.InsertarAuditoria(estructura, null, TipoAuditoriaEnum.DEL);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar la estructura: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar la estructura: " + ex);            }        }        public static string ObtenerEstructuraPorEstado(bool estado)        {            List<Estructura> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from estructura in context.Estructura                                 where estructura.Estado == estado                                 orderby estructura.Nivel, estructura.Orden                                 select estructura).ToList();                    }                    transactionScope.Complete();                }                     }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la estructura por estado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la estructura por estado: " + ex);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerEstructuraPorId(string idSerializado)        {            Guid id = Serializador.DeSerializeEntity<Guid>(idSerializado);            Estructura result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from est in context.Estructura                                  where est.Id == id                                  select est).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la estructura por id: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la estructura por id: " + ex);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerEstructura(string _id)        {            List<Estructura> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from estructura in context.Estructura                                  orderby estructura.Nivel, estructura.Orden                                  select estructura).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la estructura por id: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la estructura por id: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }                public static string ObtenerUrlPorId(string parametros)        {            string result = string.Empty;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from a in _context.Estructura                                  where a.Id == new Guid(parametros)                                  select a.Url).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la estructura por id: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la estructura por id: " + ex);            }            return result ?? string.Empty;        }        public static string ObtenerTituloPorPagina(string parametros)        {            string result = string.Empty;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from a in _context.Estructura                                  where a.Url == parametros                                  select a.Descripcion).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el titulo de la pagina: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el titulo de la pagina: " + ex);            }            return result ?? string.Empty;        }    }}
