using System;using System.Collections.Generic;using System.Data;using System.Data.Objects.SqlClient;using System.Linq;using Negocio.Configuracion;using Negocio.Utilidades;using PersistenciaSigeor;using System.Diagnostics;using System.Transactions;namespace Negocio.Sigeor.GestionControl{    public class NegociacionLineaNegocio    {        public static void Insertar(string negociacionSerializada)        {            try            {                using (var context = new SigeorEntities())                {                    NegociacionLinea negociacion = Serializador.DeSerializeEntity<NegociacionLinea>(negociacionSerializada);                    negociacion.FechaCrea = DateTime.Now;                    context.NegociacionLinea.Attach(negociacion);                    context.ObjectStateManager.ChangeObjectState(negociacion, EntityState.Added);                    context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(negociacion, null, TipoAuditoriaEnum.INS);                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo registrar la negociacion por linea: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo registrar la negociacion por linea: " + ex);            }        }        public static void Modificar(string negociacionSerializada)        {            try            {                using (var context = new SigeorEntities())                {                    var result = Serializador.DeSerializeEntity<NegociacionLinea>(negociacionSerializada);                    if (result != null)                    {                        result.FechaMod = DateTime.Now;                        var busqueda = (from linea in context.NegociacionLinea                                        where linea.Id.Equals(result.Id)                                        select linea).FirstOrDefault();                        NegociacionLinea busquedaAnterior = null;                        if (busqueda != null)                            busquedaAnterior = Reflection.ClonarEntidadAuditoria(busqueda);                        context.NegociacionLinea.ApplyCurrentValues(result);                        context.SaveChanges();                        AuditoriaNegocio.InsertarAuditoria(result, busquedaAnterior, TipoAuditoriaEnum.UPD);                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar la negociacion por linea: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar la negociacion por linea: " + ex);            }        }        public static void Eliminar(string negociacionSerializada)        {            try            {                using (var context = new SigeorEntities())                {                    NegociacionLinea negociacion = Serializador.DeSerializeEntity<NegociacionLinea>(negociacionSerializada);                    context.NegociacionLinea.Attach(negociacion);                    context.ObjectStateManager.ChangeObjectState(negociacion, EntityState.Deleted);                    context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(negociacion, null, TipoAuditoriaEnum.DEL);                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar la negociacion por linea: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar la negociacion por linea: " + ex);            }        }        public static string ObtenerNegociaciones()        {            List<NegociacionLinea> result;            using (var context = new SigeorEntities())            {                try                {                    result = (from negociacion in context.NegociacionLinea                              orderby negociacion.Descripcion                              select negociacion).ToList();                }                catch (Exception ex)                {                    Log.WriteEntry("No se pudo obtener las negociaciones por linea: " + ex, EventLogEntryType.Error);                    throw new Exception("No se pudo obtener las negociaciones por linea: " + ex);                }            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerNegociacionesPorEstado(bool estado)        {            List<NegociacionLinea> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from negociacion in context.NegociacionLinea                                  where negociacion.Estado.Equals(estado)                                  orderby negociacion.Descripcion                                  select negociacion).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las negociaciones por linea por estado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener las negociaciones por linea por estado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerNegociacionesPorId(string idSerializado)        {            NegociacionLinea result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        Guid id = Serializador.DeSerializeEntity<Guid>(idSerializado);                        result = (from negociacion in context.NegociacionLinea                                  where negociacion.Id.Equals(id)                                  select negociacion).FirstOrDefault();                        result = CargarLineas(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la negociacion por linea por Id: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la negociacion por linea por Id: " + ex);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerNegociacionesPorCoincidencia(string value, bool estado)        {            List<NegociacionLinea> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (                            from negociacion in context.NegociacionLinea                            where                                 negociacion.CodLinea.ToUpper().Contains(value.ToUpper()) ||                                 negociacion.Descripcion.ToUpper().Contains(value.ToUpper()) ||                                 value.Contains(SqlFunctions.StringConvert(negociacion.PrecioHHEstructura)) ||                                 value.Contains(SqlFunctions.StringConvert(negociacion.PrecioHHMaquinaria)) ||                                 value.Contains(SqlFunctions.StringConvert(negociacion.ValorNegoHHEst)) ||                                 value.Contains(SqlFunctions.StringConvert(negociacion.ValorNegoHHMaq)) &&                                 negociacion.Estado.Equals(estado)                            orderby negociacion.Descripcion                            select negociacion).ToList();                        result = CargarLineas(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la negociacion por linea por coincidencia: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la negociacion por linea por coincidencia: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerNegociacionesPaginado(int pagesize, int pageIndex, out int totalRegistros)        {            List<NegociacionLinea> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from negociacion in context.NegociacionLinea                                  orderby negociacion.Descripcion                                  select negociacion).ToList();                        totalRegistros = result.Count;                        result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                        result = CargarLineas(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la negociaciones por linea paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la negociaciones por linea paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerNegociacionesPorCoincidenciaPaginado(string value, bool estado, int pagesize, int pageIndex, out int totalRegistros)        {            List<NegociacionLinea> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (                            from negociacion in context.NegociacionLinea                            where                                  negociacion.CodLinea.ToUpper().Contains(value.ToUpper()) ||                                 negociacion.Descripcion.ToUpper().Contains(value.ToUpper()) ||                                 value.Contains(SqlFunctions.StringConvert(negociacion.PrecioHHEstructura)) ||                                 value.Contains(SqlFunctions.StringConvert(negociacion.PrecioHHMaquinaria)) ||                                  value.Contains(SqlFunctions.StringConvert(negociacion.ValorNegoHHEst)) ||                                 value.Contains(SqlFunctions.StringConvert(negociacion.ValorNegoHHMaq)) &&                                 negociacion.Estado.Equals(estado)                            orderby negociacion.Descripcion                            select negociacion).ToList();                        result = result.OrderBy(ent => ent.Descripcion).ToList();                        totalRegistros = result.Count;                        result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                        result = CargarLineas(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la negociaciones por linea por coincidencia paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la negociaciones por linea coincidencia paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerNegociacionesPorEstadoPaginado(bool estado, int pagesize, int pageIndex, out int totalRegistros)        {            List<NegociacionLinea> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var contexto = new SigeorEntities())                    {                        result = (from negociacion in contexto.NegociacionLinea                                  join linea in contexto.SM_LINEA on negociacion.CodLinea equals linea.COD_LINEA                                  where negociacion.Estado.Equals(estado)                                  orderby negociacion.Descripcion                                  select negociacion).ToList();                        totalRegistros = result.Count;                        result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                        result = CargarLineas(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la negociaciones por linea por estado paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la negociaciones por linea estado paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static void ModificarMasivamente(string value, bool estado)        {            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        List<NegociacionLinea> lista = new List<NegociacionLinea>();                        string result;                        if (!string.IsNullOrEmpty(value))                        {                            result = ObtenerNegociacionesPorCoincidencia(value, estado);                            lista = !string.IsNullOrEmpty(result)                                ? Serializador.DeSerializeEntity<List<NegociacionLinea>>(result) : null;                        }                        if (string.IsNullOrEmpty(value))                        {                            result = ObtenerNegociacionesPorEstado(estado);                            lista = !string.IsNullOrEmpty(result)                                ? Serializador.DeSerializeEntity<List<NegociacionLinea>>(result) : null;                        }                        foreach (var negociacion in lista)                        {                            negociacion.Estado = !negociacion.Estado;                            if (negociacion.EntityState.Equals(EntityState.Detached))                            {                                context.NegociacionLinea.Attach(negociacion);                                context.ObjectStateManager.ChangeObjectState(negociacion, EntityState.Modified);                            }                            context.NegociacionLinea.ApplyCurrentValues(negociacion);                            context.SaveChanges();                        }                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar las negociaciones por linea de forma masiva: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar las negociaciones por linea de forma masiva: " + ex);            }        }        private static List<NegociacionLinea> CargarLineas(List<NegociacionLinea> value)        {            try            {                if (value != null && value.Any())                {                    value.ForEach(ent =>                    {                        ent.CampoNombreLinea = ent.SM_LINEA.NOM_LINEA;                    });                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar el nombre de las lineas en las negociaciones por linea: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo cargar el nombre de las lineas en las negociaciones por linea: " + ex);            }            return value;        }        private static NegociacionLinea CargarLineas(NegociacionLinea value)        {            try            {                if (value != null) value.CampoNombreLinea = value.SM_LINEA.NOM_LINEA;            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar el nombre de la linea en la negociacion por linea: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo cargar el nombre de la linea en la negociacion por linea: " + ex);            }            return value;        }    }}
