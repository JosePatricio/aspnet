using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace Negocio{    public class Reflection    {        public static T ClonarEntidadAuditoria<T>(T objeto)        {            if (objeto == null)                return objeto;            var anteriorClonado = Activator.CreateInstance<T>();            var listaPropiedades =                objeto.GetType()                    .GetProperties()                    .ToList()                    .FindAll(ent => (ent != null && !ent.Name.StartsWith("Campo") && ((!ent.PropertyType.IsClass && !ent.PropertyType.IsEnum) || ent.PropertyType.Name.ToLower().Equals("string"))));            foreach (var propiedad in listaPropiedades)            {                var value = objeto.GetType().GetProperty(propiedad.Name).GetValue(objeto, null);// propiedad.GetValue(danioAnterior, null);

                if (value == null) continue;                propiedad.SetValue(anteriorClonado, objeto.GetType().GetProperty(propiedad.Name).GetValue(objeto, null), null);            }            return anteriorClonado;        }        public static Object ClonarEntidad(Object entityOrigen, Object entityDestino)        {            if (entityOrigen != null)            {                var propiedades = (from prop in entityOrigen.GetType().GetProperties()                                   where !prop.Name.StartsWith("Entity") || !prop.Name.Contains("Entity")                                   select prop);                foreach (var property in propiedades)                {                    var value = entityOrigen.GetType().GetProperty(property.Name).GetValue(entityOrigen, null);                    if (value != null)
                        entityDestino.GetType().GetProperty(property.Name).SetValue(entityDestino, value, null);                }            }            else                entityDestino = null;            return entityDestino;        }    }}
