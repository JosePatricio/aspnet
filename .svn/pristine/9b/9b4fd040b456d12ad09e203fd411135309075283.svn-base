using System;using System.Collections.Generic;using System.Data;using System.Linq;using System.Transactions;using Negocio.Utilidades;using PersistenciaSigeor;using System.Diagnostics;namespace Negocio.Configuracion{    public class PerfilNegocio    {        private static SigeorEntities _context;        public static void Insertar(string perfil)        {            try            {                _context = new SigeorEntities();                var result = Serializador.DeSerializeEntity<Perfil>(perfil);                _context.Perfil.AddObject(result);                _context.SaveChanges();                AuditoriaNegocio.InsertarAuditoria(result, null, TipoAuditoriaEnum.INS);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo registrar el perfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo registrar el perfil: " + ex.Message);            }        }        public static void Modificar(string perfil)        {            try            {                _context = new SigeorEntities();                var result = Serializador.DeSerializeEntity<Perfil>(perfil);                var resultBusqueda = ObtenerPerfilesPorId(result.Id);                var busqueda = !string.IsNullOrEmpty(resultBusqueda) ? Serializador.DeSerializeEntity<Perfil>(resultBusqueda) : null;                var perfilAnterior = Reflection.ClonarEntidadAuditoria(busqueda);                if (result.EntityState.Equals(EntityState.Detached))                {                    _context.Perfil.Attach(result);                    _context.ObjectStateManager.ChangeObjectState(result, EntityState.Modified);                }                _context.Perfil.ApplyCurrentValues(result);                _context.SaveChanges();                AuditoriaNegocio.InsertarAuditoria(result, perfilAnterior, TipoAuditoriaEnum.UPD);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar el perfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar el perfil: " + ex.Message);            }        }        public static void ModificarMasivamente(string parametroSerializado)        {            try            {                var clave = Serializador.DeSerializeEntity<ClaseBasica>(parametroSerializado);                var result = !string.IsNullOrEmpty(clave.Descripcion) ? ObtenerPerfilesPorCoincidencia(clave.Descripcion, clave.Estado) : ObtenerPerfilesPorEstado(clave.Estado);                var lista = !string.IsNullOrEmpty(result) ? Serializador.DeSerializeEntity<List<Perfil>>(result) : new List<Perfil>();                using (var context = new SigeorEntities())                {                    foreach (var perfil in lista)                    {                        var perfilAnterior = Reflection.ClonarEntidadAuditoria(perfil);                        perfil.Estado = !perfil.Estado;                        perfil.CampoCedulaUsuario = clave.CedulaUsuario;                        perfil.CampoIpUsuario = clave.IpUsuario;                        if (perfil.EntityState.Equals(EntityState.Detached))                        {                            context.Perfil.Attach(perfil);                            context.ObjectStateManager.ChangeObjectState(perfil, EntityState.Modified);                        }                        context.Perfil.ApplyCurrentValues(perfil);                        context.SaveChanges();                        AuditoriaNegocio.InsertarAuditoria(perfil, perfilAnterior, TipoAuditoriaEnum.UPD);                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar los perfil's dew forma masiva: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar los perfil's de forma masiva: " + ex.Message);            }        }        public static void Eliminar(string perfil)        {            try            {                _context = new SigeorEntities();                var result = Serializador.DeSerializeEntity<Perfil>(perfil);                _context.Perfil.DeleteObject(result);                _context.SaveChanges();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar el perfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar el perfil: " + ex.Message);            }        }        public static string ObtenerPerfilesPorEstado(bool estado)        {            List<Perfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from perfil in context.Perfil                                  where perfil.Estado.Equals(estado)                                  orderby perfil.Descripcion                                  select perfil                            ).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los perfil's por estado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los perfil's por estado: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPerfilesPorEstadoPaginado(bool estado, int pagesize, int pageIndex, out int totalRegistros)        {            List<Perfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from perfil in context.Perfil                                  where perfil.Estado.Equals(estado)                                  orderby perfil.Descripcion                                  select perfil                            ).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los perfil's por estado paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los perfil's por estado paginado: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPerfiles()        {            List<Perfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from perfil in context.Perfil                                  orderby perfil.Descripcion                                  select perfil                            ).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los perfil's: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los perfil's: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPerfilesPaginado(int pagesize, int pageIndex, out int totalRegistros)        {            List<Perfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from perfil in context.Perfil                                  orderby perfil.Descripcion                                  select perfil                            ).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los perfil's paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los perfil's paginado: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPerfilesPorId(Guid id)        {            Perfil result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from perfil in context.Perfil                                  where perfil.Id.Equals(id)                                  select perfil                            ).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el perfil por Id: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el perfil por Id: " + ex.Message);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPerfilesPorCodigo(string codigo)        {            Perfil result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from perfil in context.Perfil                                  where perfil.Codigo.ToUpper().Equals(codigo.ToUpper())                                  select perfil                            ).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el perfil por codigo: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el perfil por codigo: " + ex.Message);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPerfilesPorCoincidencia(string value, bool estado)        {            List<Perfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from perfil in context.Perfil                                  where perfil.Codigo.ToUpper().Contains(value.ToUpper()) ||                                        perfil.Descripcion.ToUpper().Contains(value.ToUpper()) &&                                        perfil.Estado.Equals(estado)                                  orderby perfil.Descripcion                                  select perfil                            ).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los pefil's por coincidencia: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los pefil's por coincidencia: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPerfilesPorCoincidenciaPaginado(string value, bool estado, int pagesize, int pageIndex, out int totalRegistros)        {            List<Perfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from perfil in context.Perfil                                  where perfil.Codigo.ToUpper().Contains(value.ToUpper()) ||                                        perfil.Descripcion.ToUpper().Contains(value.ToUpper()) &&                                        perfil.Estado.Equals(estado)                                  orderby perfil.Descripcion                                  select perfil).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el perfil's por coincidencia paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el perfil's por coincidencia paginado: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPaginadeInicioPorCedula(string cedula)        {            string result = null;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from a in context.Perfil                                  join b in context.UsuarioPerfil                                   on a.Id equals b.IdPerfil                                  where b.Cedula == cedula                                  select a.PaginaInicio).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la pagina de inicio por cedula: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener la pagina de inicio por cedula: " + ex.Message);            }            return result;        }        public static List<string> PerfilesSession()        {            List<string> result = null;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from e in context.Perfil select e.Descripcion).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo los nombres de los perfil's: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo los nombres de los perfil's: " + ex.Message);            }            return result;        }    }}