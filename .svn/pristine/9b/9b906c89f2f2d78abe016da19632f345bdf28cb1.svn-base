using System;using System.Collections.Generic;using System.Linq;using Negocio.Utilidades;using System.Data;using System.Transactions;using Negocio.Configuracion;using Negocio.Sigeor.GestionMgl;using PersistenciaSigeor;using System.Diagnostics;namespace Negocio.GestionControl{    public class DanioNegocio    {        private static SigeorEntities context;        public static void Insertar(string danioSerializado)        {            try            {                using (context = new SigeorEntities())                {                    var danio = Serializador.DeSerializeEntity<S_ESTIMATE_DAMAGE_CODE>(danioSerializado);                    danio.FECHA_CREACION = DateTime.Now;                    context.S_ESTIMATE_DAMAGE_CODE.Attach(danio);                    context.ObjectStateManager.ChangeObjectState(danio, EntityState.Added);                    context.S_ESTIMATE_DAMAGE_CODE.AddObject(danio);                    context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(danio, null, TipoAuditoriaEnum.INS);                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo registrar el daño: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo registrar el daño: " + ex);            }        }        public static void Modificar(string danioSerializado)        {            try            {                TransactionOptions transactionOptions = new TransactionOptions();                transactionOptions.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                using (context = new SigeorEntities())                {                    var danioActual = Serializador.DeSerializeEntity<S_ESTIMATE_DAMAGE_CODE>(danioSerializado);                    var busquedaAnterior = (from danio in context.S_ESTIMATE_DAMAGE_CODE                                            where danio.COD_DAMAGE == danioActual.COD_DAMAGE &&                                            danio.COD_LINEA == danioActual.COD_LINEA &&                                            danio.TIPO_DANIO == danioActual.TIPO_DANIO                                            select danio).FirstOrDefault();                    var anteriorClonado = Reflection.ClonarEntidadAuditoria(busquedaAnterior);                    danioActual.FECHA_MOD = DateTime.Now;                    context.S_ESTIMATE_DAMAGE_CODE.ApplyCurrentValues(danioActual);                    context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(danioActual, anteriorClonado, TipoAuditoriaEnum.UPD);                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar el daño: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar el daño: " + ex);            }        }        public static void ModificarDanioMasivo(string parametroDanio)        {            try            {                var parametro = Serializador.DeSerializeEntity<ClaseBasica>(parametroDanio);                string resultSerializado = null;                resultSerializado = !string.IsNullOrEmpty(parametro.Descripcion) ? ObtenerDaniosPorCoincidencia(parametro.Descripcion, parametro.EstadoString) : ObtenerDaniosPorEstado(parametro.EstadoString);                List<S_ESTIMATE_DAMAGE_CODE> result = !string.IsNullOrEmpty(resultSerializado)                    ? Serializador.DeSerializeEntity<List<S_ESTIMATE_DAMAGE_CODE>>(resultSerializado)                    : null;                if (result != null)                    foreach (var item in result)                    {                        var clave = new ClaseBasica                        {                            IdStringUno = item.COD_DAMAGE,                            IdStringDos = item.COD_LINEA,                            IdStringTres = item.TIPO_DANIO                        };                        var resultDanio = ObtenerDanioPorCodigo(Serializador.SerializeEntity(clave));                        var danio = !string.IsNullOrEmpty(resultDanio)                            ? Serializador.DeSerializeEntity<S_ESTIMATE_DAMAGE_CODE>(resultDanio)                            : null;                        danio.ESTADO = danio.ESTADO != null && danio.ESTADO.Equals("A") ? "I" : "A";                        danio.CampoIpUsuario = parametro.IpUsuario;                        danio.CampoCedulaUsuario = parametro.CedulaUsuario;                        Modificar(Serializador.SerializeEntity(danio));                    }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar el daño de forma masiva: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar el daño de forma masiva: " + ex);            }        }        public static void Eliminar(string danioSerializado)        {            try            {                using (context = new SigeorEntities())                {                    var danio = Serializador.DeSerializeEntity<S_ESTIMATE_DAMAGE_CODE>(danioSerializado);                    context.S_ESTIMATE_DAMAGE_CODE.DeleteObject(danio);                    context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(danio, null, TipoAuditoriaEnum.DEL);                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar el daño: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar el daño: " + ex);            }        }        public static string ObtenerDaniosPorEstado(string estado)        {            List<S_ESTIMATE_DAMAGE_CODE> result = null;            try            {                TransactionOptions transactionOptions = new TransactionOptions();                transactionOptions.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        result = (from danio in context.S_ESTIMATE_DAMAGE_CODE                                  where danio.ESTADO == estado                                  orderby danio.DESCRIP                                  select danio).ToList();                        CargarLineaTipoDanio(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el daño por estado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el daño por estado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDaniosPorEstadoPaginado(string estado, int pagesize, int pageIndex, out int totalRegistros)        {            List<S_ESTIMATE_DAMAGE_CODE> result = null;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        result = (from danio in context.S_ESTIMATE_DAMAGE_CODE                                  where danio.ESTADO == estado                                  orderby danio.DESCRIP                                  select danio).ToList();                        totalRegistros = result.Count;                        result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                        CargarLineaTipoDanio(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el daño por estado paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el daño por estado paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDanios()        {            List<S_ESTIMATE_DAMAGE_CODE> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        result = (from danio in context.S_ESTIMATE_DAMAGE_CODE                                  orderby danio.DESCRIP                                  select danio).ToList();                        CargarLineaTipoDanio(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los daños: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los daños: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDanioPorCodigo(string clavePrimaria)        {            S_ESTIMATE_DAMAGE_CODE danioResult;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        var result = Serializador.DeSerializeEntity<ClaseBasica>(clavePrimaria);                        danioResult = (from danio in context.S_ESTIMATE_DAMAGE_CODE                                       where                                        danio.COD_DAMAGE.Equals(result.IdStringUno) &&                                        danio.COD_LINEA.Equals(result.IdStringDos) &&                                        danio.TIPO_DANIO.Equals(result.IdStringTres)                                       select danio).FirstOrDefault();                        CargarLineaTipoDanio(danioResult);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los daños por codigo: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los daños por codigo: " + ex);            }            return danioResult != null ? Serializador.SerializeEntity(danioResult) : null;        }        public static string ObtenerDaniosPorCoincidencia(string value, string estado)        {            List<S_ESTIMATE_DAMAGE_CODE> result;            try            {                var resultTipoDanio = DatosCreados.CargarTipoDanios();                var resultTipoDanios = resultTipoDanio != null ? Serializador.DeSerializeEntity<List<ClaseBasica>>(resultTipoDanio) : null;                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        estado = estado.ToUpper();                        value = value.ToUpper();                        result = (from danio in context.S_ESTIMATE_DAMAGE_CODE                                  where danio.ESTADO == estado                                  orderby danio.DESCRIP                                  select danio).ToList();                        CargarLineaTipoDanio(result);                        result = (from danio in result                                  where                                    danio.DESCRIP.ToUpper().Contains(value) ||                                    danio.CampoNombreLinea.ToUpper().Contains(value) ||                                    danio.CampoNombreTipoDanio.ToUpper().Contains(value)                                  select danio).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los daños por coincidencia: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los daños por coincidencia: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDaniosPorCoincidenciaPaginado(string value, string estado, int pagesize, int pageIndex, out int totalRegistros)        {            List<S_ESTIMATE_DAMAGE_CODE> result;            try            {                var resultTipoDanio = DatosCreados.CargarTipoDanios();                var resultTipoDanios = resultTipoDanio != null ? Serializador.DeSerializeEntity<List<ClaseBasica>>(resultTipoDanio) : null;                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        estado = estado.ToUpper();                        value = value.ToUpper();                        result = (from danio in context.S_ESTIMATE_DAMAGE_CODE                                  where danio.ESTADO == estado                                  orderby danio.DESCRIP                                  select danio).ToList();                        CargarLineaTipoDanio(result);                        result = (from danio in result                                  where                                    danio.DESCRIP.ToUpper().Contains(value) ||                                    danio.CampoNombreLinea.ToUpper().Contains(value) ||                                    danio.CampoNombreTipoDanio.ToUpper().Contains(value)                                  select danio).ToList();                        totalRegistros = result.Count;                        result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                        CargarLineaTipoDanio(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los daños por coincidencia paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los daños por coincidencia paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDaniosPorLinea(string idLinea, string estado)        {            List<S_ESTIMATE_DAMAGE_CODE> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        result = Serializador.DeSerializeEntity<List<S_ESTIMATE_DAMAGE_CODE>>(ObtenerDaniosPorEstado(estado));                        CargarLineaTipoDanio(result);                        if (!string.IsNullOrEmpty(idLinea))                            result = (from danio in context.S_ESTIMATE_DAMAGE_CODE                                      where danio.COD_LINEA.ToUpper() == idLinea.ToUpper() &&                                     danio.ESTADO == estado                                      orderby danio.DESCRIP                                      select danio).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los daños por linea: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los daños por linea: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDanioPorIdLineaIdTipoDanio(string clavePrimaria)        {            List<S_ESTIMATE_DAMAGE_CODE> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        var clave = Serializador.DeSerializeEntity<ClaseBasica>(clavePrimaria);                        result = (from danio in context.S_ESTIMATE_DAMAGE_CODE                                  where danio.COD_LINEA == clave.IdStringUno &&                                        danio.TIPO_DANIO == clave.IdStringDos                                  orderby danio.DESCRIP                                  select danio).ToList();                        CargarLineaTipoDanio(result);                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el daño por linea y tipo de danio: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el daño por linea y tipo de danio: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        private static void CargarLineaTipoDanio(List<S_ESTIMATE_DAMAGE_CODE> result)        {            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        if (result != null)                        {                            var resultTipoDanio = DatosCreados.CargarTipoDanios();                            var resultTipoDanios = resultTipoDanio != null ? Serializador.DeSerializeEntity<List<ClaseBasica>>(resultTipoDanio) : null;                                                           SM_LINEA linea;                                ClaseBasica tipoDanio;                                foreach (var danio in result)                                {                                    linea = (from ent in context.SM_LINEA                                             select ent).FirstOrDefault();                                    tipoDanio = (from ent in resultTipoDanios                                                 select ent).FirstOrDefault();                                    danio.CampoNombreLinea = linea != null ? linea.NOM_LINEA : string.Empty;                                    danio.CampoNombreTipoDanio = tipoDanio != null ? tipoDanio.Nombre : string.Empty;                                }                                                   }                        transactionScope.Complete();                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar los daños por tipo de danio: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo cargar los daños por tipo de danio: " + ex);            }        }        private static void CargarLineaTipoDanio(S_ESTIMATE_DAMAGE_CODE danio)        {            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        if (danio != null)                        {                            var resultTipoDanio = DatosCreados.CargarTipoDanios();                            var resultTipoDanios = resultTipoDanio != null ? Serializador.DeSerializeEntity<List<ClaseBasica>>(resultTipoDanio) : null;                            SM_LINEA linea = (from ent in context.SM_LINEA                                             select ent).FirstOrDefault();                            ClaseBasica tipoDanio = (from ent in resultTipoDanios                                                     select ent).FirstOrDefault();                            danio.CampoNombreLinea = linea != null ? linea.NOM_LINEA : string.Empty;                            danio.CampoNombreTipoDanio = tipoDanio != null ? tipoDanio.Nombre : string.Empty;                        }                        transactionScope.Complete();                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar los nombres de las lineas: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo cargar los nombres de las lineas: " + ex);            }        }    }}