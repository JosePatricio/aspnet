using System;using System.Collections.Generic;using System.Linq;using System.Transactions;using Negocio.Utilidades;using PersistenciaSigeor;using System.Data.Common;using System.Data.SqlClient;using System.Threading.Tasks;using System.Collections.Specialized;using System.Data;using System.Data.Objects.SqlClient;using System.Diagnostics;using System.Diagnostics.Eventing.Reader;using Negocio.Configuracion;using PersistenciaSap;namespace Negocio.Sigeor.GestionMgl{    public class ProveedorNegocio    {        private static SigeorEntities _context = new SigeorEntities();        public static void Insertar(string usuarioPerfilSerializado)        {//            try            {                {                    S_OCRD proveedor = Serializador.DeSerializeEntity<S_OCRD>(usuarioPerfilSerializado);                    if (!_context.S_OCRD.Any(u => u.CardCode == proveedor.CardCode))                    {                        _context = new SigeorEntities();                        _context.S_OCRD.AddObject(proveedor);                        _context.SaveChanges();                        AuditoriaNegocio.InsertarAuditoria(proveedor, null, TipoAuditoriaEnum.INS);                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo registrar el proveedor: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo registrar el proveedor: " + ex);            }        }        public static void Modificar(string usuarioPerfilSerializado)        {            try            {                var proveedor = Serializador.DeSerializeEntity<S_OCRD>(usuarioPerfilSerializado);                _context = new SigeorEntities();                var anterior = (from prov in _context.S_OCRD                                where prov.CardCode == proveedor.CardCode                                select prov).FirstOrDefault();                var valAnterior = Reflection.ClonarEntidadAuditoria(anterior);                //_context.S_OCRD.Attach(proveedor);                //_context.ObjectStateManager.ChangeObjectState(proveedor, EntityState.Modified);                _context.S_OCRD.ApplyCurrentValues(proveedor);                _context.SaveChanges();                AuditoriaNegocio.InsertarAuditoria(proveedor, valAnterior, TipoAuditoriaEnum.UPD);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar el proveedor: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar el proveedor: " + ex);            }        }        public static void Eliminar(string usuarioPerfilSerializado)        {            try            {                S_OCRD proveedor = Serializador.DeSerializeEntity<S_OCRD>(usuarioPerfilSerializado);                if (_context.S_OCRD.Any(u => u.CardCode == proveedor.CardCode))                {                    _context = new SigeorEntities();                    _context.S_OCRD.Attach(proveedor);                    _context.ObjectStateManager.ChangeObjectState(proveedor, EntityState.Deleted);                    _context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(proveedor, null, TipoAuditoriaEnum.DEL);                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar el proveedor: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar el proveedor: " + ex);            }        }        public static string ObtenerProveedores()        {            List<S_OCRD> result;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from proveedor in context.S_OCRD                                  orderby proveedor.CardName                                  select proveedor).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los proveedores: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los proveedores: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(CargarInspectores(result)) : null;        }        public static string ObtenerProveedoresPorEstado(string parametro)        {            List<S_OCRD> result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        param.EstadoString = param.EstadoString.ToUpper();                        //result = (from proveedor in context.S_OCRD                        //              //where proveedor.Estado.ToUpper().Equals(param.EstadoString)                        //          orderby proveedor.CardName                        //          select proveedor).ToList();                        if (param.EstadoString.Equals("A"))                            result = (from proveedor in context.S_OCRD                                      where !proveedor.State1.Equals("0")                                                         //proveedor.Estado.Equals(state)                                      orderby proveedor.CardName                                      select proveedor).ToList();                        else                            result = (from proveedor in context.S_OCRD                                      where proveedor.State1.Equals("0")                                                         //proveedor.Estado.Equals(state)                                      orderby proveedor.CardName                                      select proveedor).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los proveedores por estado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los proveedores por estado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(CargarInspectores(result)) : null;        }        public static string ObtenerProveedoresPorCoincidenciaPaginado(string value, bool estado, int pagesize, int pageIndex, out int totalRegistros)        {            //string state = (estado == true ? "A" : "I");            List<S_OCRD> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        if (estado)                            result = (from proveedor in context.S_OCRD                                      where                                             (                                             proveedor.CardCode.ToUpper().Contains(value) ||                                             proveedor.CardName.ToUpper().Contains(value) ||                                             proveedor.CntctPrsn.ToUpper().Contains(value) ||                                             proveedor.Address.ToUpper().Contains(value) ||                                             proveedor.Phone1.ToUpper().Contains(value)) &&                                             !proveedor.State1.Equals("0")                                                         //proveedor.Estado.Equals(state)                                      orderby proveedor.CardName                                      select proveedor).ToList();                        else                            result = (from proveedor in context.S_OCRD                                      where                                             (                                             proveedor.CardCode.ToUpper().Contains(value) ||                                             proveedor.CardName.ToUpper().Contains(value) ||                                             proveedor.CntctPrsn.ToUpper().Contains(value) ||                                             proveedor.Address.ToUpper().Contains(value) ||                                             proveedor.Phone1.ToUpper().Contains(value)) &&                                             proveedor.State1.Equals("0")                                                       //proveedor.Estado.Equals(state)                                      orderby proveedor.CardName                                      select proveedor).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los proveedores por coincidencia paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los proveedores por coincidencia paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(CargarInspectores(result)) : null;        }        public static string ObtenerProveedoresPorEstadoPaginado(bool estado, int pagesize, int pageIndex, out int totalRegistros)        {            List<S_OCRD> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        // var auxEstado = (estado == false ? "0" : string.Empty);                        if (estado)                        {                            result = (from prov in context.S_OCRD                                      where !prov.State1.Equals("0")                                      orderby prov.CardName                                      select prov).ToList();                        }                        else                        {                            result = (from prov in context.S_OCRD                                      where prov.State1.Equals("0")                                      orderby prov.CardName                                      select prov).ToList();                        }                        // result = contexto.S_OCRD.Where(o => o.Estado.Equals((estado == true ? "A" : "I"))).OrderBy(x => x.Nombre).ToList();                        //result = (from prov in context.S_OCRD                        //          where  prov.State1 != auxEstado                         //          orderby prov.CardName                        //          select prov).ToList();                        totalRegistros = result.Count;                        result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los proveedores por estado paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los proveedores por estado paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(CargarInspectores(result)) : null;        }        public static string ObtenerProveedorPorId(string parametro)        {            S_OCRD result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from proveedor in context.S_OCRD                                  where proveedor.CardCode.Equals(parametro)                                  select proveedor).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el proveedor por id: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el proveedor por id: " + ex);            }            return result != null ? Serializador.SerializeEntity(CargarInspectores(result)) : null;        }        public static void ModificarEstadoMasivamente(string parametroProveedor)        {            try            {                var parametro = Serializador.DeSerializeEntity<ClaseBasica>(parametroProveedor);                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var lista = new List<S_OCRD>();                        string result;                        if (!string.IsNullOrEmpty(parametro.Descripcion))                        {                            result = ObtenerNegociacionesPorCoincidencia(parametro.Descripcion, parametro.EstadoString);                            lista = !string.IsNullOrEmpty(result)                                ? Serializador.DeSerializeEntity<List<S_OCRD>>(result) : null;                        }                        if (string.IsNullOrEmpty(parametro.Descripcion))                        {                            result = ObtenerNegociacionesPorEstado(parametro.EstadoString);                            lista = !string.IsNullOrEmpty(result)                                ? Serializador.DeSerializeEntity<List<S_OCRD>>(result) : null;                        }                        foreach (var proveedor in lista)                        {                            // proveedor.Estado = proveedor.Estado != "A" ? "A" : "I";                            //if (proveedor.EntityState.Equals(EntityState.Detached))                            //{                            //    _context.S_OCRD.Attach(proveedor);                            //    context.ObjectStateManager.ChangeObjectState(proveedor, EntityState.Modified);                            //}                            proveedor.State1 = int.Parse(proveedor.State1) > 0 ? "0" : "1";                            proveedor.CampoCedulaUsuario = parametro.CedulaUsuario;                            proveedor.CampoIpUsuario = parametro.IpUsuario;                            //Modificar(Serializador.SerializeEntity(proveedor));                            var anterior = (from prov in context.S_OCRD                                            where prov.CardCode == proveedor.CardCode                                            select prov).FirstOrDefault();                            var valAnterior = Reflection.ClonarEntidadAuditoria(anterior);                            //_context.S_OCRD.Attach(proveedor);                            //_context.ObjectStateManager.ChangeObjectState(proveedor, EntityState.Modified);                            context.S_OCRD.ApplyCurrentValues(proveedor);                            context.SaveChanges();                            //AuditoriaNegocio.InsertarAuditoria(proveedor, valAnterior, TipoAuditoriaEnum.UPD);                            //context.S_OCRD.ApplyCurrentValues(proveedor);                            //context.SaveChanges();                        }                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar los proveedores de forma masiva: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar los proveedores de forma masiva: " + ex);            }        }        public static string ObtenerNegociacionesPorCoincidencia(string value, string estado)        {            List<S_OCRD> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        //result = (                        //from proveedor in _context.S_OCRD                        //where                        //     proveedor.CardName.ToUpper().Contains(value.ToUpper()) ||                        //     proveedor.CntctPrsn.ToUpper().Contains(value.ToUpper()) ||                        //     proveedor.Phone1.Contains(value.ToUpper())// &&                        //                                               //  proveedor.Estado.Equals(estado)                        //orderby proveedor.CardName                        //select proveedor).ToList();                        value = value.ToUpper();                        if (estado.Equals("A"))                            result = (from proveedor in context.S_OCRD                                      where                                      (                                      proveedor.CardCode.ToUpper().Contains(value) ||                                      proveedor.CardName.ToUpper().Contains(value) ||                                       proveedor.CntctPrsn.ToUpper().Contains(value) ||                                       proveedor.Address.ToUpper().Contains(value) ||                                       proveedor.Phone1.Contains(value)) &&                                       !proveedor.State1.Equals("0")                                      orderby proveedor.CardName                                      select proveedor).ToList();                        else                            result = (from proveedor in context.S_OCRD                                      where                                        (                                        proveedor.CardCode.ToUpper().Contains(value) ||                                        proveedor.CardName.ToUpper().Contains(value) ||                                       proveedor.CntctPrsn.ToUpper().Contains(value) ||                                       proveedor.Address.ToUpper().Contains(value) ||                                       proveedor.Phone1.Contains(value)) &&                                       proveedor.State1.Equals("0")                                      orderby proveedor.CardName                                      select proveedor).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar los proveedores por coincidencia: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar los proveedores por coincidencia: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(CargarInspectores(result)) : null;        }        public static string ObtenerNegociacionesPorEstado(string estado)        {            List<S_OCRD> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        if (estado.Equals("A"))                            result = (from proveedor in context.S_OCRD                                      where !proveedor.State1.Equals("0")                                      orderby proveedor.CardName                                      select proveedor).ToList();                        else                            result = (from proveedor in context.S_OCRD                                      where proveedor.State1.Equals("0")                                      orderby proveedor.CardName                                      select proveedor).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar los proveedores por estado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar los proveedores por coincidencia: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(CargarInspectores(result)) : null;        }        private static List<S_OCRD> CargarInspectores(List<S_OCRD> lista)        {            try            {                var transactionOptions = new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        foreach (var item in lista)                        {                            var inspector = (from insp in context.SM_INSPECTOR                                             where insp.COD_INSPECTOR == item.COD_INSPECTOR                                             select insp).FirstOrDefault();                            if (inspector != null) item.CampoInspector = inspector.NOMBRES + " " + inspector.APELLIDOS;                        }                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar la lista de inspectores para los proveedores: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo cargar la lista de inspectores para los proveedores: " + ex);            }            return lista;        }        private static S_OCRD CargarInspectores(S_OCRD ocrd)        {            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var inspector = (from insp in context.SM_INSPECTOR                                         where insp.COD_INSPECTOR == ocrd.COD_INSPECTOR                                         select insp).FirstOrDefault();                        if (inspector != null) ocrd.CampoInspector = inspector.NOMBRES + " " + inspector.APELLIDOS;                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo cargar el inspector para el proveedor: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo cargar el inspector para el proveedor: " + ex);            }            return ocrd;        }    }}