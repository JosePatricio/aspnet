using System;using System.Collections.Generic;using System.Data.SqlClient;using System.Diagnostics;using System.Linq;using System.Text;using System.Transactions;using Negocio.Sigeor.Configuracion;using Negocio.Utilidades;using PersistenciaAretina;using PersistenciaSigeor;using C_EORESTRUCTURA = PersistenciaAretina.C_EORESTRUCTURA;using C_EORMAQUINARIA = PersistenciaAretina.C_EORMAQUINARIA;using C_EORTRANSITO = PersistenciaAretina.C_EORTRANSITO;namespace Negocio.LecturaAretina{    public class EgresosNegocio    {        public static List<EgresoEorAretina> ObtenerEgresosEorSigeor(string numEor)        {            List<EgresoEorAretina> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from cab in context.SInv_H_CEgrProducto                                  join det in context.SInv_H_DEgrProducto on cab.Id_EgrProducto equals det.Id_EgrProducto                                  join prod in context.SInv_M_Producto on det.id_producto equals prod.id_Producto                                  where cab.Num_Eor == numEor                                  select new EgresoEorAretina                                  {                                      IdEgrProducto = cab.Id_EgrProducto,                                      CodDeposito = cab.Cod_Deposito,                                      IdBodega = cab.Id_Bodega,                                      IdTipoSalida = cab.Id_TipoSalida,                                      NumEor = cab.Num_Eor,                                      FechaCrea = cab.FechaCrea,                                      FechaSalida = cab.FechaSalida,                                      IdProducto = det.id_producto,                                      NroParte = prod.NroParte,                                      Tipo = det.tipo,                                      Cantidad = det.Cantidad,                                      Costo = det.Costo,                                      Total = det.Total,                                      CostoIva = det.Costo_Iva,                                      TotalIva = det.Total_iva,                                  }).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el egreso del Sistema Sigeor para el EOR: " + numEor + "   " + ex, EventLogEntryType.Warning);            }            return result;        }        public static List<EgresoEorAretina> ObtenerEgresosEorAretina(string numEor)        {            List<EgresoEorAretina> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                                                var resultTrinity = context.GET_EGRESO_EOR_TRINITY(numEor).ToList();                        result = (from cab in resultTrinity                                  select new EgresoEorAretina                                  {                                      IdEgrProducto = cab.ID_EGRPRODUCTO,                                      CodDeposito = cab.COD_DEPOSITO,                                      IdBodega = cab.ID_BODEGA,                                      IdTipoSalida = cab.ID_TIPOSALIDA,                                      NumEor = cab.NUM_EOR,                                      FechaCrea = cab.FECHACREA,                                      FechaSalida = cab.FECHASALIDA,                                      IdProducto = cab.ID_PRODUCTO,                                      NroParte = cab.NroParte,                                      Tipo = cab.TIPO,                                      Cantidad = cab.CANTIDAD,                                      Costo = cab.COSTO,                                      Total = cab.TOTAL,                                      CostoIva = cab.COSTO_IVA,                                      TotalIva = cab.TOTAL_IVA,                                  }).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el egreso del Sistema Trinity para el EOR: " + numEor + "   " + ex, EventLogEntryType.Warning);            }            return result;        }    }}
