using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Transactions;using Negocio.Utilidades;using PersistenciaSigeor;using System.Globalization;using Negocio.Job;namespace Negocio.Reportes{    public class ReporteEorTransitoNegocio    {        public static List<GET_CABECERA_EOR_TRANSITO_Result> ObtenerEorCabeceraPorFiltros(string parametros)        {            if (string.IsNullOrEmpty(parametros))                return null;            List<GET_CABECERA_EOR_TRANSITO_Result> result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametros);                if (!string.IsNullOrEmpty(param.DescripcionUno))                {                    EorTransitoProcesoNegocio.VerificarEorTransito(param.DescripcionUno);                }                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_CABECERA_EOR_TRANSITO(param.DescripcionUno,                            param.DescripcionDos, param.DescripcionTres, param.DescripcionCuatro, param.DescripcionCinco,                            param.FechaDateTimeStringUno, param.FechaDateTimeStringDos, param.EstadoString).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EORs de Cabecera Transito: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los EORs de Cabecera Transito: " + ex.Message);            }            return result;//.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerEorCabeceraPorFiltrosPaginado(string parametros, int pagesize, int pageIndex, out int totalRegistros)        {            if (string.IsNullOrEmpty(parametros))            {                totalRegistros = 0;                return null;            }            List<GET_CABECERA_EOR_TRANSITO_Result> result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametros);                if (!string.IsNullOrEmpty(param.DescripcionUno))                {                    EorTransitoProcesoNegocio.VerificarEorTransito(param.DescripcionUno);                }                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_CABECERA_EOR_TRANSITO(param.DescripcionUno,                        param.DescripcionDos, param.DescripcionTres, param.DescripcionCuatro, param.DescripcionCinco,                        param.FechaDateTimeStringUno, param.FechaDateTimeStringDos, param.EstadoString).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EORs de Cabecera Transito Paginado:  " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los EORs de Cabecera de Transito Paginado : " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static List<GET_DETALLE_EOR_TRANSITO_Result> ObtenerEorDetallePorNumeroEor(string numEor)        {            List<GET_DETALLE_EOR_TRANSITO_Result> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_DETALLE_EOR_TRANSITO(numEor).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EORs por Detalle de Transito: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los EORs por Detalle de Transito: " + ex.Message);            }            return result;        }        public static void VerificarEliminarReparaciones()        {            try            {                var codigo = "COD_TRAN";                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var politica = (from pol in context.PoliticasCorporativas                                        where pol.Codigo == codigo && pol.Estado                                        select pol).FirstOrDefault();                        if (politica != null && politica.Estado)                        {                            var fechaInicio = politica.FechaValueUno.Value.ToString(CultureInfo.InvariantCulture);                            var fechaFin = politica.FechaValueDos.Value.ToString(CultureInfo.InvariantCulture);                            var countEliminados = context.ELMINACION_REPARACIONES(fechaInicio, fechaFin, codigo).FirstOrDefault();                            Log.WriteEntry("Se eliminaron <<" + countEliminados.ToString() + ">> registros de la tabla C_EORTRANSITO" +                                            "de la fecha " + fechaInicio + " a la fecha " + fechaFin, EventLogEntryType.Information);                        }                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar automaticamente las reparaciones de Transito: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar automaticamente  las reparaciones de Transito: " + ex.Message);            }        }    }}