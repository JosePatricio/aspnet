using System;using System.Collections.Generic;using System.Linq;using System.Text;using PersistenciaSigeor;using System.Transactions;using System.Collections;using Negocio.Utilidades;using System.Reflection;namespace Negocio.Aretina{    public class ReportesEIR    {        public static string ObtenerDatosEstimacionEirPaginados(string parametros, int pagesize, int pageIndex, out int totalRegistros)        {            List<GET_ESTIMACION_EIR_Result> result;                        try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametros);                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_ESTIMACION_EIR(param.DescripcionUno, param.DescripcionDos,                            param.DescripcionTres, param.DescripcionCuatro,                            param.EstadoString, param.FechaDateTimeStringUno,                            param.FechaDateTimeStringDos).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception e)            {                throw new Exception("ObtenerDatosEstimacionEirPaginados.: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDatosEstimacionEirReporte(string parametros)        {            List<GET_ESTIMACION_EIR_Result> result;            var param = Serializador.DeSerializeEntity<ClaseBasica>(parametros);            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_ESTIMACION_EIR(param.DescripcionUno, param.DescripcionDos,                            param.DescripcionTres, param.DescripcionCuatro,                            param.EstadoString, param.FechaDateTimeStringUno,                            param.FechaDateTimeStringDos).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                throw new Exception("ObtenerDatosEstimacionEirReporte.: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDatosEirEstructuraPaginados(string parametros, int pagesize, int pageIndex, out int totalRegistros)        {            List<GET_EIR_ESTRUCTURA_Result> result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametros);                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_EIR_ESTRUCTURA(param.DescripcionUno, param.DescripcionDos,                             param.DescripcionTres, param.DescripcionCuatro,                            param.EstadoString, param.FechaDateTimeStringUno,                            param.FechaDateTimeStringDos).ToList();                    }                                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception e)            {                throw new Exception("ObtenerDatosEirEstructuraPaginados.: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDatosEirEstructuraReporte(string parametros)        {            List<GET_EIR_ESTRUCTURA_Result> result;            var param = Serializador.DeSerializeEntity<ClaseBasica>(parametros);            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_EIR_ESTRUCTURA(param.DescripcionUno, param.DescripcionDos,                            param.DescripcionTres, param.DescripcionCuatro,                            param.EstadoString, param.FechaDateTimeStringUno,                            param.FechaDateTimeStringDos).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                throw new Exception("ObtenerDatosEirEstructuraReporte.: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;           }        public static string ObtenerDatosEirMaquinariaPaginado(string parametros, int pagesize, int pageIndex, out int totalRegistros)        {            List<GET_EIR_MAQUINARIA_Result> result;            var param = Serializador.DeSerializeEntity<ClaseBasica>(parametros);            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_EIR_MAQUINARIA(param.DescripcionUno, param.DescripcionDos,                             param.DescripcionTres, param.DescripcionCuatro,                            param.EstadoString, param.FechaDateTimeStringUno,                            param.FechaDateTimeStringDos).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception e)            {                throw new Exception("ObtenerDatosEirMaquinariaPaginado.: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDatosEirMaquinariaReporte(string parametros)        {            List<GET_EIR_MAQUINARIA_Result> result;            var param = Serializador.DeSerializeEntity<ClaseBasica>(parametros);            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_EIR_MAQUINARIA(param.DescripcionUno, param.DescripcionDos,                            param.DescripcionTres, param.DescripcionCuatro,                            param.EstadoString, param.FechaDateTimeStringUno,                            param.FechaDateTimeStringDos).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                throw new Exception("ObtenerDatosEirMaquinariaReporte.: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }    }}