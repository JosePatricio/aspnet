using System;using System.Collections.Generic;using System.Linq;using Negocio.Utilidades;using System.Data;using Negocio.Configuracion;using Negocio.Sigeor.GestionMgl;using PersistenciaSigeor;using System.Transactions;namespace Negocio.Sigeor.GestionControl{    public class ReparacionNegocio    {        private static SigeorEntities context;        public static void Insertar(string reparacionSerializado)        {            try            {                context = new SigeorEntities();                var reparacion = Serializador.DeSerializeEntity<S_ESTIMATE_REPAIR_CODE>(reparacionSerializado);                if (context.S_ESTIMATE_REPAIR_CODE.ToList().Find(ent =>                    ent.COD_REPAIR.Equals(reparacion.COD_REPAIR) &&                    ent.COD_LINEA.Equals(reparacion.COD_LINEA)//&& ent.TIPO_reparacion.Equals(reparacion.TIPO_reparacion)                    ) == null)                {                                     //context.S_ESTIMATE_REPAIR_CODE.Attach(reparacion);                    //context.ObjectStateManager.ChangeObjectState(reparacion, EntityState.Added);                    context.S_ESTIMATE_REPAIR_CODE.AddObject(reparacion);                    context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(reparacion, null, TipoAuditoriaEnum.INS);                                    }                else                {                    throw new Exception("El daño que desea ingresar ya existe");                }            }            catch (Exception e)            {                throw new Exception("No se pudo registrar el reparacion: " + e.Message);            }        }        public static void InsertarDependencias(string datosInsercion)                {            try            {                context = new SigeorEntities();                var result = Serializador.DeSerializeEntity<ClaseBasica>(datosInsercion);                if (result != null)                {                    var reparacion = result.Reparacion;                    if (context.S_ESTIMATE_REPAIR_CODE.ToList().Find(ent =>                    ent.COD_REPAIR.Equals(reparacion.COD_REPAIR) &&                    ent.COD_LINEA.Equals(reparacion.COD_LINEA)                                        ) == null)                    {                        context.ObjectStateManager.ChangeObjectState(reparacion, EntityState.Added);                        context.S_ESTIMATE_REPAIR_CODE.AddObject(reparacion);                        context.SaveChanges();                        AuditoriaNegocio.InsertarAuditoria(reparacion, null, TipoAuditoriaEnum.INS);                    }                }                else                {                    throw new Exception("No pudo realizar la insercion de datos para esta reparacion");                }            }            catch (Exception)            {                throw;            }        }        public static void Modificar(string reparacionSerializado)        {            try            {                context = new SigeorEntities();                var reparacion = Serializador.DeSerializeEntity<S_ESTIMATE_REPAIR_CODE>(reparacionSerializado);                var repAnterior = context.S_ESTIMATE_REPAIR_CODE.SingleOrDefault(d => d.COD_REPAIR == reparacion.COD_REPAIR);                if (repAnterior != null)                {                    context.S_ESTIMATE_REPAIR_CODE.DeleteObject(repAnterior);                    context.SaveChanges();                    reparacion.FECHA_MOD = DateTime.Now;                    context.S_ESTIMATE_REPAIR_CODE.AddObject(reparacion);                    context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(reparacion, repAnterior, TipoAuditoriaEnum.UPD);                }            }            catch (Exception e)            {                throw new Exception("No se pudo modificar el reparacion: " + e.Message);            }        }        public static void ModificacionMasiva(string parametroSerializado)        {            try            {                context = new SigeorEntities();                ClaseBasica parametro = Serializador.DeSerializeEntity<ClaseBasica>(parametroSerializado);                var result = ObtenerReparacionesPorCoincidencia(parametro.Descripcion, parametro.Estado ? "A" : "I");                if (!string.IsNullOrEmpty(result))                {                    var lista = Serializador.DeSerializeEntity<List<S_ESTIMATE_REPAIR_CODE>>(result);                    foreach (var reparacion in lista)                    {                        reparacion.ESTADO = reparacion.ESTADO.Equals("A") ? "I" : "A";                        reparacion.FECHA_MOD = DateTime.Now;                        reparacion.CampoCedulaUsuario = parametro.CedulaUsuario;                        reparacion.CampoIpUsuario = parametro.IpUsuario;                        //  ReparacionNegocio.Modificar(Serializador.SerializeEntity(reparacion.Reparacion));                        //   reparacion.Estado = !danioReparacion.Estado;                        //  reparacion.FechaModificacion = DateTime.Now;                        reparacion.CampoCedulaUsuario = parametro.CedulaUsuario;                        reparacion.CampoIpUsuario = parametro.IpUsuario;                        Modificar(Serializador.SerializeEntity(reparacion));                    }                }            }            catch (Exception e)            {                throw new Exception("No se pudo modificar las reparaciones masivamente: " +e);            }        }        public static void Eliminar(string reparacionSerializado)        {            try            {                context = new SigeorEntities();                var reparacion = Serializador.DeSerializeEntity<S_ESTIMATE_REPAIR_CODE>(reparacionSerializado);                if (context.S_ESTIMATE_REPAIR_CODE.ToList().Find(ent =>                    ent.COD_REPAIR.Equals(reparacion.COD_REPAIR) &&                ent.COD_LINEA.Equals(reparacion.COD_LINEA)                //&& ent.TIPO_reparacion.Equals(reparacion.TIPO_reparacion)                ) != null)                {                    context.S_ESTIMATE_REPAIR_CODE.DeleteObject(reparacion);                    context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(reparacion, null, TipoAuditoriaEnum.DEL);                }            }            catch (Exception e)            {                throw new Exception("No se pudo eliminar el reparacion: " + e.Message);            }        }        public static string ObtenerReparacionesPorEstado(string estado)        {            List<S_ESTIMATE_REPAIR_CODE> lista = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        lista = (from reparacion in context.S_ESTIMATE_REPAIR_CODE                                 where reparacion.ESTADO == estado                                 orderby reparacion.DESCRIP                                 select reparacion).ToList();                    }                    transactionScope.Complete();                }                CargarLineaTiporeparacion(lista);            }            catch (Exception e)            {                throw new Exception("No se pudo buscar en  BD.: " + e.Message);            }            return lista.Any() ? Serializador.SerializeEntity(lista) : null;        }        public static string ObtenerReparaciones()        {            List<S_ESTIMATE_REPAIR_CODE> lista;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        lista = (from reparacion in context.S_ESTIMATE_REPAIR_CODE                                 orderby reparacion.DESCRIP                                 select reparacion).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                throw new Exception("No se pudo buscar en  BD. " + e.Message);            }            return lista.Any() ? Serializador.SerializeEntity(lista) : null;        }        public static string ObtenerReparacionPorClave(string clavePrimaria)        {            S_ESTIMATE_REPAIR_CODE reparacion;            try            {                var result = Serializador.DeSerializeEntity<ClaseBasica>(clavePrimaria);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        reparacion = (from ent in context.S_ESTIMATE_REPAIR_CODE                                      where ent.COD_REPAIR == result.IdStringUno &&                             ent.COD_LINEA == result.IdStringDos                                      orderby ent.DESCRIP                                      select ent).FirstOrDefault();                    }                    transactionScope.Complete();                }                            }            catch (Exception e)            {                throw new Exception("No se pudo buscar en  BD.: " + e.Message);            }            return reparacion != null ? Serializador.SerializeEntity(reparacion) : null;        }        public static string ObtenerReparacionesPorCoincidencia(string value, string estado)        {            List<S_ESTIMATE_REPAIR_CODE> lista;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        estado = estado.ToUpper();                        value = value.ToUpper();                        lista = (from reparacion in context.S_ESTIMATE_REPAIR_CODE                                 join linea in context.SM_LINEA on reparacion.COD_LINEA equals linea.COD_LINEA                                 where (reparacion.COD_REPAIR.ToUpper().Contains(value) ||                                 reparacion.DESCRIP.ToUpper().Contains(value) ||                                 linea.NOM_LINEA.ToUpper().Contains(value) ||                                                                  reparacion.DESCRIP.ToUpper().Contains(value)) &&                                 reparacion.ESTADO.Equals(estado)                                 orderby reparacion.DESCRIP                                 select reparacion).ToList();                        CargarLineaTiporeparacion(lista);                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                throw new Exception("No se pudo buscar en la BD.: " + e.Message);            }            return lista.Any() ? Serializador.SerializeEntity(lista) : null;        }        public static string ObtenerReparacionesPorIdLinea(string clavePrimaria)        {            List<S_ESTIMATE_REPAIR_CODE> result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(clavePrimaria);                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        result = (from rep in context.S_ESTIMATE_REPAIR_CODE                                  where rep.COD_LINEA == param.IdStringDos &&                                  rep.ESTADO == "A"                                  orderby rep.DESCRIP                                  select rep).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                throw new Exception("No se pudo buscar las reparaciones por lineas en la BD.: " + e.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        private static void CargarLineaTiporeparacion(List<S_ESTIMATE_REPAIR_CODE> lista)        {            SM_LINEA linea;            try            {                if (lista != null)                {                    TransactionOptions transactionOptions = new TransactionOptions                    {                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                    };                    using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                    {                        using (context = new SigeorEntities())                        {                            foreach (var reparacion in lista)                            {                                linea = (from lin in context.SM_LINEA                                         where reparacion.COD_LINEA == lin.COD_LINEA                                         select lin).FirstOrDefault();                                reparacion.CampoNombreLinea = linea != null ? linea.NOM_LINEA : string.Empty;                            }                        }                        transactionScope.Complete();                    }                }            }            catch (Exception)            {                throw new Exception("No se pudo cargar los los nombres de las lineas");            }        }        private static void CargarLineaTiporeparacion(S_ESTIMATE_REPAIR_CODE reparacion)        {            try            {                if (reparacion != null)                {                    var result = LineaNegocio.ObtenerLineaPorCodigo(reparacion.COD_LINEA);                    SM_LINEA linea = null;                    if (!string.IsNullOrEmpty(result))                        linea = Serializador.DeSerializeEntity<SM_LINEA>(result);                    reparacion.CampoNombreLinea = linea != null ? linea.NOM_LINEA : string.Empty;                }            }            catch (Exception)            {                throw new Exception("No se pudo cargar los los nombres de las lineas");            }        }        public static string ObtenerReparacionesPorCoincidenciaPaginado(string value, string estado, int pagesize, int pageIndex, out int totalRegistro)        {            List<S_ESTIMATE_REPAIR_CODE> lista;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (context = new SigeorEntities())                    {                        estado = estado.ToUpper();                        value = value.ToUpper();                        lista = (from reparacion in context.S_ESTIMATE_REPAIR_CODE                                 join linea in context.SM_LINEA on reparacion.COD_LINEA equals linea.COD_LINEA                                 where (reparacion.COD_REPAIR.ToUpper().Contains(value) ||                                 reparacion.DESCRIP.ToUpper().Contains(value) ||                                 linea.NOM_LINEA.ToUpper().Contains(value) ||                                                                  reparacion.DESCRIP.ToUpper().Contains(value)) &&                                 reparacion.ESTADO.Equals(estado)                                 orderby reparacion.DESCRIP                                 select reparacion).ToList();                        totalRegistro = lista.Count;                        lista = lista.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                        CargarLineaTiporeparacion(lista);                    }                    transactionScope.Complete();                }            }            catch (Exception e)            {                throw new Exception("No se pudo buscar en la BD.: " + e.Message);            }            return lista.Any() ? Serializador.SerializeEntity(lista) : null;        }    }}