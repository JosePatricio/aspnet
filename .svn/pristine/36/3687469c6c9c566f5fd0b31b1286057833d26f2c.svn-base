using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Text;using System.Transactions;using Negocio.Sigeor.Configuracion;using Negocio.Utilidades;using PersistenciaAretina;using PersistenciaSigeor;using Negocio.LecturaSap;using Negocio.LecturaAretina;using System.Data.Objects.SqlClient;using Negocio.Sigeor.GestionControl;using System.Globalization;using System.Threading;namespace Negocio.Job{    public class EorTransitoProcesoNegocio2    {        private static string CODIGO_POLITICA_DIF_VALOR = "FEC_RESTR";        public static void VerificarEorTransito(string numEor)        {            try            {                if (!string.IsNullOrEmpty(numEor))                {                    var eorSigeor = ObtenerEorCabeceraSigeorPorId(numEor);                    if (eorSigeor == null) //No existe EOR en SIGEOR                    {                        var eorAretina = ObtenerEorCabeceraAretinaPorId(numEor);                        if (eorAretina != null) // Existe EOR en Aretina                        {                            eorSigeor = new SC_EORTRANSITO();                            var entity = Reflection.ClonarEntidad(eorAretina, eorSigeor);                            eorSigeor = entity != null ? (SC_EORTRANSITO)entity : null;                            if (eorSigeor != null)                            {                                GuardarEorSigeor(eorSigeor);                                var listaEorSigeor = new List<SC_EORTRANSITO> { eorSigeor };                                ProcesarEorTransito(listaEorSigeor);                            }                        }                    }                }                else                {                    ProcesarEorTransito(null);                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo verificar el EOR por Transito (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo verificar el EOR por Transito: " + ex, EventLogEntryType.Error);            }        }        public static SC_EORTRANSITO ObtenerEorCabeceraSigeorPorId(string numEor)        {            SC_EORTRANSITO result = null;            try            {                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from eor in context.SC_EORTRANSITO                                  where eor.NUM_EORTRANSITO == numEor &&                                        (eor.ESTADOEST == 8 && eor.ESTADOMAQ == null) ||                                        (eor.ESTADOEST == null && eor.ESTADOMAQ == 8) ||                                        (eor.ESTADOEST == 8 && eor.ESTADOMAQ == 8)                                  select eor).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener el EOR de Estructura del Sistema Sigeor por Id (ThreadAbortException): " + numEor + " " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el EOR de Estructura del Sistema Sigeor por Id: " + numEor + " " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<SC_EORTRANSITO> ObtenerEorsCabeceraSigeor()        {            var result = new List<SC_EORTRANSITO>();            try            {                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from eor in context.SC_EORTRANSITO                                  where (eor.ESTADOEST == 8 && eor.ESTADOMAQ == null) ||                                        (eor.ESTADOEST == null && eor.ESTADOMAQ == 8) ||                                        (eor.ESTADOEST == 8 && eor.ESTADOMAQ == 8)                                  select eor).ToList();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener los EOR's Transito del Sitema SIGEOR (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EOR's Transito del Sitema SIGEOR: " + ex, EventLogEntryType.Error);            }            return result;        }        public static void GuardarEorSigeor(SC_EORTRANSITO eor)        {            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var contextSigeor = new SigeorEntities())                    {                        eor.ESTADO_PROCESO = 0;                        contextSigeor.SC_EORTRANSITO.AddObject(eor);                        using (var contextAretina = new AretinaEntities())                        {                            var detalleEor = (from det in contextAretina.D_EORTRANSITO                                              where det.NUM_EORTRANSITO == eor.NUM_EORTRANSITO                                              select det).ToList();                            foreach (var detalleAretina in detalleEor)                            {                                var detalleSigeor = new SD_EORTRANSITO();                                var entity = Reflection.ClonarEntidad(detalleAretina, detalleSigeor);                                detalleSigeor = entity != null ? (SD_EORTRANSITO)entity : null;                                if (detalleSigeor != null)                                {                                    contextSigeor.SD_EORTRANSITO.AddObject(detalleSigeor);                                }                            }                        }                        contextSigeor.SaveChanges();                        transactionScope.Complete();                    }                }            }            catch (System.Data.UpdateException ex)            {                Log.WriteEntry("No se pudo guardar el EOR Transito " + eor.NUM_EORTRANSITO + " el Sistema SIGEOR (UpdateException): " + ex, EventLogEntryType.Error);            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo guardar el EOR Transito " + eor.NUM_EORTRANSITO + " el Sistema SIGEOR (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo guardar el EOR Transito " + eor.NUM_EORTRANSITO + " el Sistema SIGEOR: " + ex, EventLogEntryType.Error);            }        }        public static void GuardarEorSigeor(IEnumerable<C_EORTRANSITO> listaEorsAretina)        {            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var contextSigeor = new SigeorEntities())                    {                        foreach (var eorAretina in listaEorsAretina)                        {                            var eorSigeor = new SC_EORTRANSITO();                            var entity = Reflection.ClonarEntidad(eorAretina, eorSigeor);                            eorSigeor = entity != null ? (SC_EORTRANSITO)entity : null;                            eorSigeor.ESTADO_PROCESO = 0;                            contextSigeor.SC_EORTRANSITO.AddObject(eorSigeor);                            using (var contextAretina = new AretinaEntities())                            {                                var detalleEor = (from det in contextAretina.D_EORTRANSITO                                                  where det.NUM_EORTRANSITO == eorSigeor.NUM_EORTRANSITO                                                  select det).ToList();                                foreach (var detalleAretina in detalleEor)                                {                                    var detalleSigeor = new SD_EORTRANSITO();                                    var entityDetalle = Reflection.ClonarEntidad(detalleAretina, detalleSigeor);                                    detalleSigeor = entity != null ? (SD_EORTRANSITO)entityDetalle : null;                                    if (detalleSigeor != null)                                    {                                        contextSigeor.SD_EORTRANSITO.AddObject(detalleSigeor);                                    }                                }                            }                        }                        contextSigeor.SaveChanges();                        transactionScope.Complete();                    }                }            }            catch (System.Data.UpdateException ex)            {                Log.WriteEntry("No se pudo guardar la lista de EORs Transito el Sistema SIGEOR (UpdateException): " + ex, EventLogEntryType.Error);            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo guardar la lista de EORs Transito el Sistema SIGEOR (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo guardar la lista de EORs Transito el Sistema SIGEOR: " + ex, EventLogEntryType.Error);            }        }        public static C_EORTRANSITO ObtenerEorCabeceraAretinaPorId(string numEor)        {            C_EORTRANSITO result = null;            try            {                var politicaDiferenciaValor = PoliticasCorporativasNegocio.ObtenerPoliticaPorCodigoDesSerializada(CODIGO_POLITICA_DIF_VALOR);                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from eor in context.C_EORTRANSITO                                  where eor.NUM_EORTRANSITO == numEor &&                                        eor.FECHA_CREACION >= politicaDiferenciaValor.FechaValueUno                                  select eor).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener el EOR Cabecera Transito del Sistema Aretina por Id (ThreadAbortException): " + numEor + " " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el EOR Cabecera Transito del Sistema Aretina por Id: " + numEor + " " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<C_EORTRANSITO> ObtenerEorsCabeceraAretina()        {            var result = new List<C_EORTRANSITO>();            try            {                var politicaDiferenciaValor = PoliticasCorporativasNegocio.ObtenerPoliticaPorCodigoDesSerializada(CODIGO_POLITICA_DIF_VALOR);                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        result = (from eor in context.C_EORTRANSITO                                  where (eor.ESTADOEST == 8 && eor.ESTADOMAQ == null && eor.FECHA_FINREPARAEST != null) ||                                        (eor.ESTADOEST == null && eor.ESTADOMAQ == 8 && eor.FECHA_FINREPARAMAQ != null) ||                                        (eor.ESTADOEST == 8 && eor.ESTADOMAQ == 8 &&                                         eor.FECHA_FINREPARAEST != null && eor.FECHA_FINREPARAMAQ != null)                                  select eor)                                  .Where(ent =>                                            (ent.ESTADOEST == 8 && ent.ESTADOMAQ == null && ent.FECHA_FINREPARAEST.Value >= politicaDiferenciaValor.FechaValueUno.Value) ||                                            (ent.ESTADOMAQ == 8 && ent.ESTADOEST == null && ent.FECHA_FINREPARAMAQ.Value >= politicaDiferenciaValor.FechaValueUno.Value) ||                                            (ent.ESTADOEST == 8 && ent.ESTADOMAQ == 8 &&                                             (ent.FECHA_FINREPARAEST.Value >= politicaDiferenciaValor.FechaValueUno ||                                              ent.FECHA_FINREPARAMAQ >= politicaDiferenciaValor.FechaValueUno))                                  ).ToList();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener los EOR's Transito del Sitema Aretina (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los EOR's Transito del Sitema Aretina: " + ex, EventLogEntryType.Error);            }            return result;        }        public static List<SC_EORTRANSITO> DiscriminarEorsTransitoAretinaSigeor()        {            IEnumerable<C_EORTRANSITO> result = new List<C_EORTRANSITO>(); ;            var listaSigeor = new List<SC_EORTRANSITO>();            try            {                var listaEorSigeor = ObtenerEorsCabeceraSigeor();                var listaEorAretina = ObtenerEorsCabeceraAretina();                result = from eorAretina in listaEorAretina                         join eorSigeor in listaEorSigeor on eorAretina.NUM_EORTRANSITO equals eorSigeor.NUM_EORTRANSITO                         into temporal                         from left in temporal.DefaultIfEmpty()                         where left == null                         select eorAretina;                foreach (var eorSigeor in from eorAretina in result                                          let eorSigeor = new SC_EORTRANSITO()                                          let entidad = Reflection.ClonarEntidad(eorAretina, eorSigeor)                                          select entidad != null ? (SC_EORTRANSITO)entidad : null)                {                    GuardarEorSigeor(eorSigeor);                }                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        listaSigeor = (from eorSigeor in context.SC_EORTRANSITO                                       where eorSigeor.ESTADO_PROCESO <= 2 &&                                              (eorSigeor.ESTADOEST == 8 && eorSigeor.ESTADOMAQ == null && eorSigeor.FECHA_FINREPARAEST != null) ||                                              (eorSigeor.ESTADOMAQ == 8 && eorSigeor.ESTADOEST == null && eorSigeor.FECHA_FINREPARAMAQ != null) ||                                              (eorSigeor.ESTADOEST == 8 && eorSigeor.ESTADOMAQ == 8 &&                                              (eorSigeor.FECHA_FINREPARAEST != null && eorSigeor.FECHA_FINREPARAMAQ != null))                                       select eorSigeor).ToList();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo Discriminar los EOR's de Transito del Sistema SIGEOR vs. Sistema Aretina (Listas/ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo Discriminar los EOR's de Transito del Sistema SIGEOR vs. Sistema Aretina (Listas): " + ex, EventLogEntryType.Error);            }            return listaSigeor;        }        public static List<C_EORTRANSITO> DiscriminarEorEstructura(string numEor)        {            IEnumerable<C_EORTRANSITO> result = new List<C_EORTRANSITO>(); ;            try            {                var politicaDiferenciaValor = PoliticasCorporativasNegocio.ObtenerPoliticaPorCodigoDesSerializada(CODIGO_POLITICA_DIF_VALOR);                List<SC_EORTRANSITO> listaSigeor;                List<C_EORTRANSITO> listaAretina;                using (var context = new SigeorEntities())                {                    if (!string.IsNullOrEmpty(numEor))                    {                        listaSigeor = (from eorSigeor in context.SC_EORTRANSITO                                       where eorSigeor.NUM_EORTRANSITO == numEor &&                                       (eorSigeor.ESTADOEST == 8 && eorSigeor.ESTADOMAQ == null && eorSigeor.FECHA_FINREPARAEST != null) ||                                       (eorSigeor.ESTADOMAQ == 8 && eorSigeor.ESTADOEST == null && eorSigeor.FECHA_FINREPARAMAQ != null) ||                                       (eorSigeor.ESTADOEST == 8 && eorSigeor.ESTADOMAQ == 8 &&                                       (eorSigeor.FECHA_FINREPARAEST != null && eorSigeor.FECHA_FINREPARAMAQ != null))                                       select eorSigeor).ToList();                    }                    else                        listaSigeor = context.SC_EORTRANSITO.ToList();                }                using (var contextAretina = new AretinaEntities())                {                    if (!string.IsNullOrEmpty(numEor) && !listaSigeor.Any())                    {                        //listaAretina = (from eorAretina in contextAretina.C_EORTRANSITO                        //                where eorAretina.NUM_EORTRANSITO == numEor &&                        //                     (eorAretina.ESTADOEST == 8 && eorAretina.ESTADOMAQ == null && eorAretina.FECHA_FINREPARAEST.Value >= politicaDiferenciaValor.FechaValueUno.Value) ||                        //                     (eorAretina.ESTADOMAQ == 8 && eorAretina.ESTADOEST == null && eorAretina.FECHA_FINREPARAMAQ.Value >= politicaDiferenciaValor.FechaValueUno.Value) ||                        //                     (eorAretina.ESTADOEST == 8 && eorAretina.ESTADOMAQ == 8 &&                        //                     (eorAretina.FECHA_FINREPARAEST.Value >= politicaDiferenciaValor.FechaValueUno ||                        //                      eorAretina.FECHA_FINREPARAMAQ >= politicaDiferenciaValor.FechaValueUno))                        //                select eorAretina).ToList();                        listaAretina = (from eorAretina in contextAretina.C_EORTRANSITO                                        where eorAretina.NUM_EORTRANSITO == numEor &&                                              eorAretina.FECHA_CREACION >= politicaDiferenciaValor.FechaValueUno                                        select eorAretina).ToList();                    }                    else                        //listaAretina = (from eorAretina in contextAretina.C_EORTRANSITO                        //                where (eorAretina.ESTADOEST == 8 && eorAretina.ESTADOMAQ == null && eorAretina.FECHA_FINREPARAEST.Value >= politicaDiferenciaValor.FechaValueUno.Value) ||                        //                      (eorAretina.ESTADOMAQ == 8 && eorAretina.ESTADOEST == null && eorAretina.FECHA_FINREPARAMAQ.Value >= politicaDiferenciaValor.FechaValueUno.Value) ||                        //                      (eorAretina.ESTADOEST == 8 && eorAretina.ESTADOMAQ == 8 &&                        //                      (eorAretina.FECHA_FINREPARAEST.Value >= politicaDiferenciaValor.FechaValueUno ||                        //                      eorAretina.FECHA_FINREPARAMAQ >= politicaDiferenciaValor.FechaValueUno))                        //                select eorAretina).ToList();                        listaAretina = (from eorAretina in contextAretina.C_EORTRANSITO                                        where eorAretina.FECHA_CREACION >= politicaDiferenciaValor.FechaValueUno                                        select eorAretina).ToList();                }                result = from eorAretina in listaAretina                         join eorSigeor in listaSigeor on eorAretina.NUM_EORTRANSITO equals eorSigeor.NUM_EORTRANSITO                         into temporal                         from left in temporal.DefaultIfEmpty()                         where left == null                         select eorAretina;            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo Discriminar los EOR's Transito del Sistema SIGEOR vs. Sistema Aretina (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo Discriminar los EOR's Transito del Sistema SIGEOR vs. Sistema Aretina: " + ex, EventLogEntryType.Error);            }            return result.ToList();        }        public static decimal ObtenerTotalManoObraEorTransitoAretina(string numEor)        {            decimal? result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new AretinaEntities())                    {                        //result = (context.C_EORTRANSITO .Join(                        //    context.D_EORTRANSITO,                        //    cab => new { cab.NUM_EORTRANSITO},                        //    det => new { det.NUM_EORTRANSITO},                        //    (cab, det) => new { cab, det })                        //    .Where(ent => ent.cab.NUM_EORTRANSITO == numEor)                        //    .Select(ent => ent.det.HORAS * ent.det.COSTOMAOBRA).Sum());                        result = (from cab in context.C_EORTRANSITO                                  join det in context.D_EORTRANSITO on cab.NUM_EORTRANSITO equals det.NUM_EORTRANSITO                                  where cab.NUM_EORTRANSITO == numEor                                  select det).Select(ent => ent.HORAS * ent.COSTOMAOBRA).Sum();                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo obtener la suma de la mano de obra estimada del EOR " + numEor + " por Transito (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma de la mano de obra estimada del EOR " + numEor + " por Transito: " + ex, EventLogEntryType.Error);            }            return result ?? 0;        }        public static decimal ObtenerTotalManoObraEorTransitoReal(string numEor)        {            var result = new decimal(0);            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    var contextAretina = new AretinaEntities();                    var contextSigeor = new SigeorEntities();                    var resultJoinCabeceraDetalle = (from cab in contextAretina.C_EORTRANSITO                                                     from det in                                                         contextAretina.D_EORTRANSITO.Where(                                                             det =>                                                                 cab.NUM_EORTRANSITO == det.NUM_EORTRANSITO)                                                     where cab.NUM_EORTRANSITO == numEor                                                     select new { cab, det }).ToList();                    if (resultJoinCabeceraDetalle.Any())                    {                        var cabeceraEor = resultJoinCabeceraDetalle.FirstOrDefault().cab;                        var detalleEor = resultJoinCabeceraDetalle.FirstOrDefault().det;                        if (cabeceraEor != null && detalleEor != null)                        {                            DateTime fechaReparacion;                            if (cabeceraEor.FECHA_FINREPARAEST != null && cabeceraEor.FECHA_FINREPARAMAQ == null)                                fechaReparacion = cabeceraEor.FECHA_FINREPARAEST.Value;                            else                                if (cabeceraEor.FECHA_FINREPARAMAQ != null && cabeceraEor.FECHA_FINREPARAEST == null)                                fechaReparacion = cabeceraEor.FECHA_FINREPARAMAQ.Value;                            else                                fechaReparacion = cabeceraEor.FECHA_FINREPARAMAQ.Value >= cabeceraEor.FECHA_FINREPARAEST.Value ?                                                   cabeceraEor.FECHA_FINREPARAMAQ.Value : cabeceraEor.FECHA_FINREPARAEST.Value;                            var negociacionProv =                                contextSigeor.GET_NEGOCIACION_PROVEEDOR_X_FECHA(detalleEor.COD_LINEA, cabeceraEor.COD_INSPECTOR, cabeceraEor.COD_DEPOSITO, fechaReparacion).FirstOrDefault();                            if (negociacionProv != null)                            {                                var sum = resultJoinCabeceraDetalle.Select(eor => eor.det.HORAS * negociacionProv.ValorNegoHHMaq).Sum();                                result = sum ?? new decimal(0);                            }                        }                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma Real de la mano de obra del EOR " + numEor + " por Estructura: " + ex, EventLogEntryType.Error);            }            return result;        }        public static GET_NEGOCIACION_LINEA_X_FECHA_Result ObtenerValorNegociacionLinea(string numEor)        {            var result = new GET_NEGOCIACION_LINEA_X_FECHA_Result();            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    var contextAretina = new AretinaEntities();                    var contextSigeor = new SigeorEntities();                    var resultJoinCabeceraDetalle = (from cab in contextAretina.C_EORTRANSITO                                                     from det in                                                         contextAretina.D_EORTRANSITO.Where(                                                             det => cab.NUM_EORTRANSITO == det.NUM_EORTRANSITO)                                                     where cab.NUM_EORTRANSITO == numEor                                                     select new { cab, det }).FirstOrDefault();                    if (resultJoinCabeceraDetalle != null)                    {                        var cabeceraEor = resultJoinCabeceraDetalle.cab;                        var detalleEor = resultJoinCabeceraDetalle.det;                        if (cabeceraEor != null && detalleEor != null)                            result =                               contextSigeor.GET_NEGOCIACION_LINEA_X_FECHA(detalleEor.COD_LINEA, cabeceraEor.COD_DEPOSITO, null).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma Real de la mano de obra del EOR " + numEor + " por Estructura: " + ex, EventLogEntryType.Error);            }            return result;        }        public static void ProcesarEorTransito(List<SC_EORTRANSITO> listaEorsNoProcesados)        {            try            {                int i = 0;                bool esBusqueda = true;                if (listaEorsNoProcesados == null)                {                    listaEorsNoProcesados = DiscriminarEorsTransitoAretinaSigeor();                    esBusqueda = false;                }                var transactionOptions = new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        foreach (var eor in listaEorsNoProcesados)                        {                            i++;                            Log.WriteEntry(i + " => NumEor: " + eor.NUM_EORTRANSITO, EventLogEntryType.Information);                            var sumaManoObra = new decimal(0);// ObtenerTotalManoObraEor(eor.NUM_EORTRANSITO);                            var sumaNegLinea = ObtenerValorNegociacionLinea(eor.NUM_EORTRANSITO);                            if (eor != null)                            {                                decimal? sumaEgresosPorEor = 0;                                eor.TOTAL_COSTOHH = sumaManoObra;                                var resultEgresoTrinity = !esBusqueda ?                                                        EgresosNegocio.ObtenerEgresosEorSigeor(eor.NUM_EORTRANSITO) :                                                        EgresosNegocio.ObtenerEgresosEorAretina(eor.NUM_EORTRANSITO);                                var listaEgresosAgrupados = resultEgresoTrinity.Select(ent => ent.IdEgrProducto).Distinct().ToList();                                foreach (var itemEgresoTrinity in listaEgresosAgrupados)                                {                                    var valorSumaMaterialSap = !esBusqueda ?                                        LecturaSapNegocio.ObtenerSumaEgresosEorSapSigeor(itemEgresoTrinity) :                                        LecturaSapNegocio.ObtenerSumaEgresosEorSap(itemEgresoTrinity);                                    sumaEgresosPorEor += valorSumaMaterialSap;                                    #region SI COINCIDE UN PRODUCTO DE SAP CON EL EGRESO DE TRINITY, GUARDA LA CANTIDAD Y PRECIO                                    var resultSap = !esBusqueda ?                                        LecturaSapNegocio.ObtenerDetalleEgresosEorSapSigeor(itemEgresoTrinity) :                                        LecturaSapNegocio.ObtenerDetalleEgresosEorSap(itemEgresoTrinity);                                    foreach (var itemSap in resultSap)                                    {                                        var detalleEgresoResult = resultEgresoTrinity.FirstOrDefault(det => det.IdEgrProducto == itemSap.Ref2 && det.NroParte == itemSap.Sww);                                        if (detalleEgresoResult != null)                                        {                                            var detalleEgreso = (from det in context.SInv_H_DEgrProducto                                                                 where det.Id_EgrProducto == itemSap.Ref2 && det.id_producto == itemSap.Sww                                                                 select det).FirstOrDefault();                                            if (detalleEgreso != null)                                            {                                                detalleEgreso.CantidadReal = (int?)itemSap.Quantity;                                                detalleEgreso.CostoReal = (decimal?)itemSap.Price;                                                context.SInv_H_DEgrProducto.ApplyCurrentValues(detalleEgreso);                                                context.SaveChanges();                                            }                                        }                                    }                                    #endregion                                }                                eor.ESTADO_PROCESO += 1;                                eor.TOTAL_REALMAT = sumaEgresosPorEor;                                eor.TOTAL_REAL = (eor.TOTAL_REALMAT ?? 0) + (eor.TOTAL_COSTOHH ?? 0);                                eor.TOTAL_COSTOHH = sumaManoObra;                                context.SC_EORTRANSITO.Attach(eor);                                context.ObjectStateManager.ChangeObjectState(eor, System.Data.EntityState.Modified);                                context.SC_EORTRANSITO.ApplyCurrentValues(eor);                            }                        }                        context.SaveChanges();                        transactionScope.Complete();                    }                }            }            catch (System.Data.UpdateException ex)            {                Log.WriteEntry("No se pudo procesar el EOR por Transito (UpdateException): " + ex, EventLogEntryType.Error);            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo procesar el EOR por Transito (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo procesar el EOR por Transito: " + ex, EventLogEntryType.Error);            }        }        public static void VerificarEliminaciones()        {            try            {                var codigo = "COD_TRAN";                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        var politica = (from pol in context.PoliticasCorporativas                                        where pol.Codigo == codigo && pol.Estado                                        select pol).FirstOrDefault();                        if (politica != null && politica.Estado)                        {                            var fechaInicio = politica.FechaValueUno.Value.ToString(CultureInfo.InvariantCulture);                            var fechaFin = politica.FechaValueDos.Value.ToString(CultureInfo.InvariantCulture);                            var countEliminados = context.ELMINACION_REPARACIONES(fechaInicio, fechaFin, codigo).FirstOrDefault();                            Log.WriteEntry("Se eliminaron <<" + countEliminados.ToString() + ">> registros de la tabla SC_EORTRANSITO" +                                            " desde la fecha " + fechaInicio + " a la fecha del Sistema SIGEOR" + fechaFin, EventLogEntryType.Information);                        }                    }                    transactionScope.Complete();                }            }            catch (ThreadAbortException ex)            {                Log.WriteEntry("No se pudo eliminar automaticamente  las reparaciones de SC_EORTRANSITO (ThreadAbortException): " + ex, EventLogEntryType.Error);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar automaticamente  las reparaciones de SC_EORTRANSITO: " + ex, EventLogEntryType.Error);            }        }    }}
