using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Transactions;using Negocio.Utilidades;using PersistenciaSigeor;using Negocio.Configuracion;using System.Data;namespace Negocio.Sigeor.Configuracion{    public class PoliticasCorporativasNegocio    {        public static void Insertar(string politicaSerializada)        {            try            {                var politica = Serializador.DeSerializeEntity<PoliticasCorporativas>(politicaSerializada);                using (var context = new SigeorEntities())                {                    var ent = (from pol in context.PoliticasCorporativas                               where pol.Codigo == politica.Codigo                               select pol).FirstOrDefault();                    if (ent == null)                    {                                                context.PoliticasCorporativas.AddObject(politica);                        context.SaveChanges();                        AuditoriaNegocio.InsertarAuditoria(politica, null, TipoAuditoriaEnum.INS);                    }                    else                    {                        throw new Exception("El codigo de la politica ya existe, ingrese uno nuevo. ");                                            }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo registrar la politica corporativa : " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo registrar la politica corporativa : " + ex.Message);            }        }        public static void Modificar(string politicaSerializado)        {            try            {                using (var context = new SigeorEntities())                {                    var politicaActual = Serializador.DeSerializeEntity<PoliticasCorporativas>(politicaSerializado);                    var busquedaAnterior = (from danio in context.PoliticasCorporativas                                            where danio.Codigo == politicaActual.Codigo                                            select danio).FirstOrDefault();                    var anteriorClonado = Reflection.ClonarEntidadAuditoria(busquedaAnterior);                    context.PoliticasCorporativas.ApplyCurrentValues(politicaActual);                    context.SaveChanges();                    AuditoriaNegocio.InsertarAuditoria(politicaActual, anteriorClonado, TipoAuditoriaEnum.UPD);                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar la politica corporativa : " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar la politica corporativa : " + ex.Message);            }        }        public static string ObtenerPoliticasPorGrupo(string parametroSerializado)        {            List<PoliticasCorporativas> result = null;            try            {                if (string.IsNullOrEmpty(parametroSerializado))                    return null;                var politica = Serializador.DeSerializeEntity<ClaseBasica>(parametroSerializado);                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from pol in context.PoliticasCorporativas                                  where pol.Grupo == politica.IdString                                  select pol).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las politicas corporativas por grupo: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener las politicas corporativas por grupo: " + ex.Message);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerPoliticaPorCodigo(string parametroSerializado)        {            PoliticasCorporativas result = null;            try            {                if (string.IsNullOrEmpty(parametroSerializado))                    return null;                var politica = Serializador.DeSerializeEntity<ClaseBasica>(parametroSerializado);                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from pol in context.PoliticasCorporativas                                  where pol.Codigo == politica.IdString                                  select pol).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las politicas corporativas por codigo: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener las politicas corporativas por codigo: " + ex.Message);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        public static PoliticasCorporativas ObtenerPoliticaPorCodigoDesSerializada(string codigo)        {            PoliticasCorporativas result = null;            try            {                                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from pol in context.PoliticasCorporativas                                  where pol.Codigo == codigo                                  select pol).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener las politicas corporativas (ObtenerPoliticaPorCodigoDesSerializada) por codigo: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener las politicas corporativas (ObtenerPoliticaPorCodigoDesSerializada) por codigo: " + ex.Message);            }            return result;        }    }}
