using Negocio.Utilidades;using PersistenciaSigeor;using System;using System.Collections.Generic;using System.Data;using System.Diagnostics;using System.Linq;using System.Text;using System.Transactions;namespace Negocio.Sigeor.GestionControl{    public class NegociacionProveedorHistoricoNegocio    {        public static string ObtenerNegociacionesProveedorHistoricoPaginado(string parametro, int pagesize, int pageIndex, out int totalRegistros)        {            List<GET_HISTORIAL_NEG_PROVEEDORES_Result> result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_HISTORIAL_NEG_PROVEEDORES(param.FechaDateTimeStringUno, param.FechaDateTimeStringDos, param.Descripcion, param.EstadoUno, param.EstadoString).ToList();                    }                    transactionScope.Complete();                }                totalRegistros = result.Count;                result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el historico de las negociaciones por proveedor existentes paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el historico de las negociaciones por proveedor existentes paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerNegociacionesProveedorHistorico(string parametro)        {            List<GET_HISTORIAL_NEG_PROVEEDORES_Result> result;            try            {                var param = Serializador.DeSerializeEntity<ClaseBasica>(parametro);                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_HISTORIAL_NEG_PROVEEDORES(param.FechaDateTimeStringUno, param.FechaDateTimeStringDos, param.Descripcion, param.EstadoUno, param.EstadoString).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el historico de las negociaciones por proveedor existentes: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el historico de las negociaciones por proveedor existentes: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        #region Obtener Negociacion por Proveedor        public static GET_NEGOCIACION_PROVEEDOR_X_FECHA_Result ObtenerNegociacionProveedorPorFecha(ClaseBasica parametros)        {            GET_NEGOCIACION_PROVEEDOR_X_FECHA_Result result = null;            try            {                if (parametros == null)                    return null;                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = context.GET_NEGOCIACION_PROVEEDOR_X_FECHA(                            parametros.IdStringUno,                            parametros.IdStringDos,                            parametros.IdStringTres,                            parametros.FechaDateTimeUno).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la negociacion de proveedor: " + ex, EventLogEntryType.Error);            }            return result;        }        #endregion Obtener Negociacion por Proveedor    }}