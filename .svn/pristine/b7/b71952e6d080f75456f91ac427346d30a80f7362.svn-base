using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Text;using System.Transactions;using Negocio.Utilidades;using PersistenciaSap;using PersistenciaSigeor;using Negocio.Job;

namespace Negocio.LecturaSap{    public class LecturaSapNegocio    {        public static decimal ObtenerSumaEgresosEorSap(string egresoTrinity)        {            List<GET_EGRESO_EOR_SAP_Result> result = null;            decimal? suma = new decimal(0);            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SapEntities())                    {                        result = context.GET_EGRESO_EOR_SAP(egresoTrinity).ToList();
                        //result = (from cab in context.OIGE
                        //          join det in context.IGE1 on cab.DocEntry equals det.DocEntry
                        //          where cab.Ref2 == egresoTrinity
                        //          select new EgresoEorSap
                        //          {
                        //              DocEntry = cab.DocEntry,
                        //              LineNum = det.LineNum,
                        //              DocDate = cab.DocDate,
                        //              DocDueDate = cab.DocDueDate,
                        //              DocTotal = cab.DocTotal,
                        //              DocTotalFC = cab.DocTotalFC,
                        //              DocTotalSy = cab.DocTotalSy,
                        //              UpdateDate = cab.UpdateDate,
                        //              CreateDate = cab.CreateDate,
                        //              Max1099 = cab.Max1099,
                        //              ItemCode = det.ItemCode,
                        //              Quantity = det.Quantity,
                        //              Price = det.Price,
                        //              LineTotal = det.LineTotal

                        //          }).ToList();
                    }

                    decimal valorMaterial = 0;
                    decimal valorPorcentaje = 0;


                    //if (!result.Any())
                    //{
                    //    valorMaterial = result.Sum(ent => ent.LineTotal) ?? 0;
                    //    valorPorcentaje = valorMaterial * (negociacionProveedor.PrecioHHEstructura / 100);
                    //    suma = valorMaterial + valorPorcentaje;
                    //}
                    suma = result.Sum(ent => ent.LineTotal) ?? 0;
                    transactionScope.Complete();

                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma del egreso de SAP: " + egresoTrinity + " " + ex, EventLogEntryType.Warning);            }            return suma.Value;        }        public static decimal ObtenerSumaEgresosEorSapSigeor(string egresoTrinity)        {            List<EgresoEorSap> result = null;            decimal? suma = new decimal(0);            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SapEntities())                    {
                        //result = context.GET_EGRESO_EOR_SAP(egresoTrinity).ToList();
                        result = (from cab in context.OIGE                                  join det in context.IGE1 on cab.DocEntry equals det.DocEntry                                  where cab.Ref2 == egresoTrinity                                  select new EgresoEorSap                                  {                                      DocEntry = cab.DocEntry,                                      LineNum = det.LineNum,                                      DocDate = cab.DocDate,                                      DocDueDate = cab.DocDueDate,                                      DocTotal = cab.DocTotal,                                      DocTotalFC = cab.DocTotalFC,                                      DocTotalSy = cab.DocTotalSy,                                      UpdateDate = cab.UpdateDate,                                      CreateDate = cab.CreateDate,                                      Max1099 = cab.Max1099,                                      ItemCode = det.ItemCode,                                      Quantity = det.Quantity,                                      Price = det.Price,                                      LineTotal = det.LineTotal                                  }).ToList();                    }                    suma = (result.Any() ? result.Sum(ent => ent.LineTotal) : new decimal(0));                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener la suma del egreso de SAP: " + egresoTrinity + " " + ex, EventLogEntryType.Warning);            }            return suma.Value;        }        public static List<EgresoEorSap> ObtenerDetalleEgresosEorSap(string egresoTrinity)        {            List<EgresoEorSap> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SapEntities())                    {                        var resultSap = context.GET_DETALLE_EGRESO_EOR_SAP(egresoTrinity);                        result = (from cab in resultSap                                  select new EgresoEorSap                                  {                                      DocEntry = cab.DocEntry,                                      LineNum = cab.LineNum,                                      DocDate = cab.DocDate,                                      DocDueDate = cab.DocDueDate,                                      DocTotal = cab.DocTotal,                                      DocTotalFC = cab.DocTotalFC,                                      DocTotalSy = cab.DocTotalSy,                                      UpdateDate = cab.UpdateDate,                                      CreateDate = cab.CreateDate,                                      Max1099 = cab.Max1099,                                      ItemCode = cab.ItemCode,                                      Quantity = cab.Quantity,                                      Price = cab.Price,                                      LineTotal = cab.LineTotal,                                      Sww = cab.SWW,                                      Ref2 = cab.Ref2                                  }).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el detalle del egreso del Sistema SAP: " + egresoTrinity + "  " + ex, EventLogEntryType.Warning);            }            return result;        }        public static List<EgresoEorSap> ObtenerDetalleEgresosEorSapSigeor(string egresoTrinity)        {            List<EgresoEorSap> result = null;            try            {                var transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SapEntities())                    {
                        //result = context.GET_DETALLE_EGRESO_EOR_SAP(egresoTrinity).ToList();
                        result = (from cab in context.OIGE                                  join det in context.IGE1 on cab.DocEntry equals det.DocEntry                                  join oitm in context.OITM on det.ItemCode equals oitm.ItemCode                                  where cab.Ref2 == egresoTrinity                                  select new EgresoEorSap                                  {                                      DocEntry = cab.DocEntry,                                      LineNum = det.LineNum,                                      DocDate = cab.DocDate,                                      DocDueDate = cab.DocDueDate,                                      DocTotal = cab.DocTotal,                                      DocTotalFC = cab.DocTotalFC,                                      DocTotalSy = cab.DocTotalSy,                                      UpdateDate = cab.UpdateDate,                                      CreateDate = cab.CreateDate,                                      Max1099 = cab.Max1099,                                      ItemCode = det.ItemCode,                                      Quantity = det.Quantity,                                      Price = det.Price,                                      LineTotal = det.LineTotal,                                      Sww = oitm.SWW,                                      Ref2 = cab.Ref2                                  }).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el detalle del egreso del Sistema SAP-Sigeor: " + egresoTrinity + "  " + ex, EventLogEntryType.Warning);            }            return result;        }    }}
