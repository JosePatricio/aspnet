using System;using System.Collections.Generic;using System.Linq;using System.Data;using System.Transactions;using Negocio.Utilidades;using PersistenciaSigeor;using System.Data.Common;using System.Data.SqlClient;using System.Threading.Tasks;using System.Collections.Specialized;using System.Diagnostics;namespace Negocio.Configuracion{    public class UsuarioPerfilNegocio    {        private static SigeorEntities _context = new SigeorEntities();        public static void Insertar(string usuarioPerfilSerializado)        {            try            {                {                    UsuarioPerfil usuarioPerfil = Serializador.DeSerializeEntity<UsuarioPerfil>(usuarioPerfilSerializado);                    if (!_context.UsuarioPerfil.Any(u => u.IdPerfil == usuarioPerfil.IdPerfil && u.Cedula == usuarioPerfil.Cedula))                    {                        _context = new SigeorEntities();                        _context.UsuarioPerfil.AddObject(usuarioPerfil);                        _context.SaveChanges();                    }                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo registrar el usuarioPerfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo registrar el usuarioPerfil: " + ex.Message);            }        }        public static void Modificar(string usuarioPerfilSerializado)        {            try            {                var usuarioPerfil = Serializador.DeSerializeEntity<UsuarioPerfil>(usuarioPerfilSerializado);                _context = new SigeorEntities();                _context.UsuarioPerfil.Attach(usuarioPerfil);                _context.ObjectStateManager.ChangeObjectState(usuarioPerfil, EntityState.Modified);                _context.SaveChanges();            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar el usuarioPerfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar el usuarioPerfil: " + ex.Message);            }        }        public static void Eliminar(string usuarioPerfilSerializado)        {            try            {                UsuarioPerfil usuarioPerfil = Serializador.DeSerializeEntity<UsuarioPerfil>(usuarioPerfilSerializado);                if (_context.UsuarioPerfil.Any(u => u.IdPerfil == usuarioPerfil.IdPerfil && u.Cedula == usuarioPerfil.Cedula))                {                    _context = new SigeorEntities();                    _context.UsuarioPerfil.Attach(usuarioPerfil);                    _context.ObjectStateManager.ChangeObjectState(usuarioPerfil, EntityState.Deleted);                    _context.SaveChanges();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar el usuarioPerfil: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar el usuarioPerfil: " + ex.Message);            }        }        public static string ObtenerUsuarioPerfilPorCedula(string cedula)        {            List<UsuarioPerfil> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from usuarioPerfil in context.UsuarioPerfil                                  where usuarioPerfil.Cedula.Equals(cedula)                                  select usuarioPerfil).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener el usuarioPerfil por cedula: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener el usuarioPerfil por cedula: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result.OrderBy(ent => ent.Cedula).ToList()) : null;        }        public static string ObtenerPerfilPorCedula(string cedula)        {            List<UsuarioPerfilModelo> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        string sql = "SELECT ISNULL(CONVERT(varchar(11),A.CEDULA),'') AS CEDULA, C.CODIGO AS CODIGO ,C.ID AS ID,C.DESCRIPCION AS DESCRIPCION,CASE WHEN (a.CEDULA IS NULL) THEN CAST(0 AS BIT) ELSE CAST(1 AS BIT) END  AS 'Estado' FROM [ADM].[USUARIOPERFIL] AS A INNER JOIN [ADM].[PERFIL] AS C ON A.IDPERFIL=C.ID AND A.CEDULA=@cedula ORDER BY C.DESCRIPCION";                        var args = new DbParameter[] { new SqlParameter { ParameterName = "cedula", Value = cedula } };                        result = context.ExecuteStoreQuery<UsuarioPerfilModelo>(sql, args).AsQueryable().ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("UsuarioPerfilNegocio-No se pudo obtener el perfil por cedula: " + ex, EventLogEntryType.Error);                throw new Exception("UsuarioPerfilNegocio-No se pudo obtener el perfil por cedula: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }                public class UsuarioPerfilModelo        {            public string Cedula { set; get; }            public string Codigo { set; get; }//Codigo del Perfil            public Guid Id { set; get; }            public string Descripcion { set; get; }            public bool Estado { set; get; }        }    }}
