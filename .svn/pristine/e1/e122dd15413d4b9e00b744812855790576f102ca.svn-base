using System;using System.Collections.Generic;using System.Linq;using System.Text;using Negocio.Utilidades;using PersistenciaSigeor;using System.Diagnostics;using System.Transactions;namespace Negocio.Configuracion{    public class DocumentosNegocio    {        private static SigeorEntities _context;        public static void Insertar(string documentoSerializado)        {            try            {                Documento documento =                    Serializador.DeSerializeEntity<Documento>(documentoSerializado);                _context = new SigeorEntities();                _context.Documento.AddObject(documento);                _context.SaveChanges();                AuditoriaNegocio.InsertarAuditoria(documento, null, TipoAuditoriaEnum.INS);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo ingresar el documento: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo ingresar el documento: " + ex);            }        }        public static void Modificar(string documentoSerializado)        {            try            {                Documento documento =                    Serializador.DeSerializeEntity<Documento>(documentoSerializado);                _context = new SigeorEntities();                var docActual = Serializador.DeSerializeEntity<Documento>(documentoSerializado);                var busquedaAnterior = (from danio in _context.Documento                                        where danio.Id == docActual.Id                                        select danio).FirstOrDefault();                var anteriorClonado = Reflection.ClonarEntidadAuditoria(busquedaAnterior);                _context.Documento.Attach(documento);                _context.ObjectStateManager.ChangeObjectState(documento, System.Data.EntityState.Modified);                _context.SaveChanges();                AuditoriaNegocio.InsertarAuditoria(docActual, anteriorClonado, TipoAuditoriaEnum.UPD);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo modificar el documento: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo modificar el documento: " + ex);            }        }        public static void Eliminar(string documentoSerializado)        {            try            {                Documento documento =                    Serializador.DeSerializeEntity<Documento>(documentoSerializado);                _context = new SigeorEntities();                _context.Documento.Attach(documento);                _context.ObjectStateManager.ChangeObjectState(documento, System.Data.EntityState.Deleted);                _context.SaveChanges();                AuditoriaNegocio.InsertarAuditoria(documento, null, TipoAuditoriaEnum.DEL);            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo eliminar el documento: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo eliminar el documento: " + ex);            }        }        public static string ObtenerDocumentos()        {            List<Documento> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from doc in context.Documento                                  orderby doc.Nombre                                  select doc).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los documentos: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los documentos: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDocumentosPaginado(int pagesize, int pageIndex, out int totalRegistros)        {            List<Documento> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from doc in context.Documento                                  orderby doc.Nombre                                  select doc).ToList();                        totalRegistros = result.Count;                        result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los documentos paginado: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los documentos paginado: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDocumentosPorId(string idSerializado)        {            Guid id = Serializador.DeSerializeEntity<Guid>(idSerializado);            Documento result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        result = (from doc in context.Documento                                  where doc.Id == id                                  select doc).FirstOrDefault();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo realizar la busqueda por id: " + id.ToString() + ": " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo realizar la busqueda por id: " + id.ToString() + ": " + ex);            }            return result != null ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDocumentosPorCoincidencia(string value)        {            List<Documento> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        value = value.ToUpper();                        //result = (from doc in context.Documento                        //          where doc.Cedula.Contains(value) ||                        //                doc.Nombre.ToUpper().Contains(value) ||                        //                doc.Tamano.ToString().Contains(value)                        //          orderby doc.Nombre                        //          select doc).ToList();                        result = context.Documento.ToList().FindAll(ent =>                            (ent.Cedula.Contains(value) ||                            ent.Nombre.ToUpper().Contains(value.ToUpper()) ||                            ent.Tamano.ToString().Contains(value))).OrderBy(ent => ent.Nombre).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los documentos por coincidencia: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los documentos coincidencia: " + ex);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }        public static string ObtenerDocumentosPorCoincidenciaPaginado(string value, int pagesize, int pageIndex, out int totalRegistros)        {            List<Documento> result;            try            {                TransactionOptions transactionOptions = new TransactionOptions                {                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted                };                using (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))                {                    using (var context = new SigeorEntities())                    {                        //result = (from doc in context.Documento                        //          where doc.Cedula.Contains(value) ||                        //                doc.Nombre.ToUpper().Contains(value) ||                        //                doc.Tamano.ToString().Contains(value)                        //          orderby doc.Nombre                        //          select doc).ToList();                        result = context.Documento.ToList().FindAll(ent =>                       (ent.Cedula.Contains(value) ||                       ent.Nombre.ToUpper().Contains(value.ToUpper()) ||                       ent.Tamano.ToString().Contains(value)));                        totalRegistros = result.Count;                        result = result.Skip(pagesize * (pageIndex-1)).Take(pagesize).ToList();                    }                    transactionScope.Complete();                }            }            catch (Exception ex)            {                Log.WriteEntry("No se pudo obtener los documentos Paginados: " + ex, EventLogEntryType.Error);                throw new Exception("No se pudo obtener los documentos Paginados: " + ex.Message);            }            return result.Any() ? Serializador.SerializeEntity(result) : null;        }    }}